var protobuf = require('protobufjs');

exports.Connector = function(c) {
	this.socketIO = c;
	console.log('server connected');
};

exports.Connector.prototype.Start =  function() {
	var self = this;
	
	this.socketIO.on('end', function() {
		console.log('server disconnected');
	});

	this.socketIO.on('readable', function() {
		try {
			var buffer = this.read(4)
			var lenPacket = buffer.readInt32LE(0);
			if(lenPacket < 0 || lenPacket > 0x7fff) {
				this.destroy();
			}

			buffer = this.read(4);
			var lenMessageName = buffer.readInt32LE(0);
			if(lenPacket < lenMessageName + 4) {
				this.destroy();
			}

			buffer = this.read(lenMessageName);
			var messageName = buffer.toString();
			buffer = this.read(lenPacket - lenMessageName - 4);
			onData(messageName, buffer);
		} catch(e) {
			console.log(e);
			this.destroy();
		}
	});

	var onData = function(msgName, buffer) {
			message = self.builder.build(msgName),
			messageObject = message.decode(buffer);

		for(var mesName in self.messageMap) if(self.messageMap.hasOwnProperty(mesName)) {
			if(mesName == msgName) {
				self.messageMap[mesName](messageObject);
			}
		}
	};
}

exports.Connector.prototype.sendMessage = function(messageObject) {
}

exports.Connector.prototype.GenerateMap = function(protoMap, funcMap) {
	var map = {};
	for(var msgName in protoMap) if(protoMap.hasOwnProperty(msgName)) {
		if(funcMap.hasOwnProperty(msgName)) {
			map[msgName] = funcMap[msgName];
			continue;
		}

		var childMap = this.GenerateMap(protoMap[msgName], funcMap);
		for(var childName in childMap) if(childMap.hasOwnProperty(childName)) {
			map[msgName + "." + childName] = childMap[childName];
		}
	}
	return map;
}