var protobuf = require('protobufjs');

exports.Connector = function(c, id, moduleName) {
	this.socketIO = c;
	this.id = id;
	this.messageMap = {};
	this.notifyMessageMap = {};
	this.moduleName = moduleName;
	this.isDestroy = false;
	console.log('Connector created', id);
};

exports.Connector.prototype.start = function() {
	var self = this;

	this.socketIO.on('close', function() {
		console.log('Connector closed', self.id);
		self.destroy();
	});

	var buffer = new Buffer(0);
	function getBuffer(offset, length) {
		var dataBuffer = new Buffer(length);
		buffer.copy(dataBuffer, 0, offset, offset + length);
		return dataBuffer;
	}

	this.socketIO.on('data', function (data) {
		var newBuffer = new Buffer(buffer.length + data.length);
		buffer.copy(newBuffer);
		data.copy(newBuffer, buffer.length);
		buffer = newBuffer;

		while(buffer.length) {
			var dataBuffer = getBuffer(0, 4);
			var lenPacket = dataBuffer.readInt32LE(0);
			if(lenPacket < 0 || lenPacket > 0x7fff) {
				self.destroy();
				return;
			}

			dataBuffer = getBuffer(4, 4);
			var lenMessageName = dataBuffer.readInt32LE(0);
			if(lenMessageName < 0 || lenPacket < lenMessageName + 4) {
				self.destroy();
				return;
			}

			dataBuffer = getBuffer(8, lenMessageName);
			var messageName = dataBuffer.toString();
			dataBuffer = getBuffer(8 + lenMessageName, lenPacket - lenMessageName - 4);
			try {
				self.onData(messageName, dataBuffer);
			} catch(e) {console.log(e.stack);}
			buffer = buffer.slice(4 + lenPacket);
		}
	});
}

exports.Connector.prototype.onData = function(msgName, buffer) {
	var message = this.builder.build(msgName),
		messageObject = message.decode(buffer);

	for(var mesName in this.messageMap) if(this.messageMap.hasOwnProperty(mesName)) {
		if(mesName == msgName) {
			this.messageMap[mesName](messageObject);
		}
	}
};

exports.Connector.prototype.destroy = function() {
	if(!this.isDestroy)
	{
		this.isDestroy = true;
		console.log('destroy connector', this.id);
		this.socketIO.destroy();
		this.module.onDestroy(this);
	}
}

exports.Connector.prototype.sendMessage = function(messageObject) {
	var data = messageObject.encode(),
		messageName = this.getMessageName(messageObject),
		length = messageName.length + 4 + data.length,
		buffer = new Buffer(length + 4);

	buffer.writeInt32LE(length, 0);
	buffer.writeInt32LE(messageName.length, 4);
	buffer.write(messageName, 8);
	data.toBuffer().copy(buffer, messageName.length + 8);
	this.socketIO.write(buffer);
}

exports.Connector.prototype.getMessageName = function(messageObject) {
	var messageName = messageObject.toString();
	messageName = messageName.substring(1);
	return messageName;
}

exports.Connector.prototype.generateMap = function(protoMap, funcMap) {
	var map = {};
	for(var msgName in protoMap) if(protoMap.hasOwnProperty(msgName)) {
		if(funcMap.hasOwnProperty(msgName)) {
			map[msgName] = funcMap[msgName];
			continue;
		}

		var childMap = this.generateMap(protoMap[msgName], funcMap);
		for(var childName in childMap) if(childMap.hasOwnProperty(childName)) {
			map[msgName + "." + childName] = childMap[childName];
		}
	}
	return map;
}

exports.Connector.prototype.onMessage = function(messageObject) {
	var msgName = this.getMessageName(messageObject);
	for(var mesName in this.notifyMessageMap) if(this.notifyMessageMap.hasOwnProperty(mesName)) {
		if(mesName == msgName) {
			this.notifyMessageMap[mesName](messageObject);
		}
	}
}