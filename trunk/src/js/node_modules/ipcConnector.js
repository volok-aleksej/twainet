var utils = require('twainetUtils');
var protobuf = require('protobufjs');
var conn = require('twainetConnector');

exports.IPCConnector = function(c, id) {
	var protoFilePath = "../messages/ipc.proto",
		self = this,
		protoMap = {},
		msgMap = {};

	conn.Connector.call(this, c, id);

	this.builder = protobuf.loadProtoFile(protoFilePath);
	protoMap = this.builder.build();
	this.isExist = false;
	this.rndval = utils.rand(0, 100).toString();

	var moduleNameToId = function(ipcName) {
		return ipcName.get("module_name") + "->" + ipcName.get("host_name") + "->" + ipcName.get("suffix");
	}

	var moduleNameFromId = function(id) {
		var ipcNamePrototype = this.builder.build("ipc.IPCName"),
			ipcName = new ipcNamePrototype();
		var lastIndex = 0;
		var name = ["module_name", "host_name", "suffix"];
		var i = 0;
		for(; i < 2; i++) {
			var index = id.indexOf("->", lastIndex);
			if(index == -1){
				ipcName.set(name[i], id.substring(lastIndex));
				return ipcName;
			}

			ipcName.set(name[i], id.substring(lastIndex, index));
			lastIndex = index + 2;
		}
		ipcName.set(name[i], id.substring(lastIndex));
		return ipcName;
	}
	
	var handlers = function () {}
	handlers.prototype.ModuleName = function(object) {
		var ipcName = object.get("ipc_name");
		self.id = moduleNameToId(ipcName);
		self.isExist = !(self.module.addModuleName(self.id), {ip:object.get("ip"), port: object.get("port")});
		var moduleState = self.builder.build("ipc.ModuleState");
		var myMessage = new moduleState(self.isExist, self.rndval);
		self.sendMessage(myMessage);

		var ipcObjectList = self.builder.build("ipc.ipcObjectList"),
			moduleList = self.module.moduleMap;
		myMessage = new ipcObjectList();
		for(moduleName in moduleList) if(moduleList.hasOwnProperty(moduleName)) {
			var module = moduleList[moduleName],
				addIPCObject = self.builder.build("ipc.AddIPCObject"),
				ipcModuleName = moduleNameFromId(moduleName),
				ipcObject = new addIPCObject(ipcModuleName, module.ip, module.port);
			myMessage.add("ipc_object", ipcObject);
		}
		self.sendMessage(myMessage);

		self.notifyMessage(self, object);
	}
	handlers.prototype.ModuleState = function(object) {
		var exist = object.get("exist"),
			randomValue = object.get("rndVal");
		if(self.isExist && exist) {
			self.destroy();
		} else if(!self.isExist && exist){
			var moduleStatePrototype = self.builder("ipc.ModuleState"),
				moduleState = new moduleStatePrototype(false, randomValue, self.id);

			self.notifyMessage(self, moduleState);
			exist = object.get("exist");
			randomValue = object.get("rndval");

			if ((exist && self.rndval > randomValue) || !exist) {
				self.destroy();
			} else if(exist && self.rndval == randomValue) {
				console.info("random values is equal");
			}
		}
	}
	handlers.prototype.AddIPCObject = function(object) {
		this.module.addIPCObject(moduleNameToId(ipcName), {ip: ip, port: port});
	}

	var notifyHandlers = function(){}
	notifyHandlers.prototype.ModuleState = function(object) {
		var id = object.get("id"),
			randomValue = object.get("rndVal");
		if(id == self.m_id) {
			object.set("exist", true);
			if(self.rndval < randomValue) {
				object.set("rndval", self.rndval);
			}
		}
	}

	msgMap = this.generateMap(protoMap, handlers.prototype);
	for(message in msgMap) if(msgMap.hasOwnProperty(message)){
		this.messageMap[message] = msgMap[message];
	}

	msgMap = this.generateMap(protoMap, notifyHandlers.prototype);
	for(message in msgMap) if(msgMap.hasOwnProperty(message)){
		this.notifyMessageMap[message] = msgMap[message];
	}
}

utils.extend(exports.IPCConnector, conn.Connector);
