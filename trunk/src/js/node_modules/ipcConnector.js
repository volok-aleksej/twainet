var utils = require('twainetUtils');
var protobuf = require('protobufjs');
var conn = require('twainetConnector');

exports.IPCConnector = function(c, id) {
	var protoFilePath = "../messages/ipc.proto",
		self = this,
		protoMap = {},
		msgMap = {};

	conn.Connector.call(this, c, id);

	this.builder = protobuf.loadProtoFile(protoFilePath);
	protoMap = this.builder.build();
	this.isExist = false;

	var handlers = function () {}
	handlers.prototype.ModuleName = function(object) {
		var ipcName = object.get("ipc_name");
		if(!self.module.addModuleName(self.moduleNameToId(ipcName)), {ip:object.get("ip"), port: object.get("port")}) {
			self.isExist = true;
		}

		var moduleState = self.builder.build("ipc.ModuleState");
		var myMessage = new moduleState(self.isExist, utils.rand().toString());
		self.sendMessage(myMessage);

		var ipcObjectList = self.builder.build("ipc.ipcObjectList"),
			moduleList = self.module.moduleMap;
		myMessage = new ipcObjectList();
		for(moduleName in moduleList) if(moduleList.hasOwnProperty(moduleName)) {
			var module = moduleList[moduleName],
				addIPCObject = self.builder.build("ipc.AddIPCObject"),
				ipcModuleName = self.moduleNameFromId(moduleName),
				ipcObject = new addIPCObject(ipcModuleName, module.ip, module.port);
			myMessage.add("ipc_object", ipcObject);
		}
		self.sendMessage(myMessageTwo);

		self.notifyMessage(object);
	}

	var notifyHandlers = function(){}

	msgMap = this.generateMap(protoMap, handlers.prototype);
	for(message in msgMap) if(msgMap.hasOwnProperty(message)){
		this.messageMap[message] = msgMap[message];
	}

	msgMap = this.generateMap(protoMap, notifyHandlers.prototype);
	for(message in msgMap) if(msgMap.hasOwnProperty(message)){
		this.notifyMessageMap[message] = msgMap[message];
	}
}

exports.IPCConnector.prototype.moduleNameToId = function(ipcName) {
	return ipcName.get("module_name") + ":" + ipcName.get("host_name") + ":" + ipcName.get("suffix");
}

exports.IPCConnector.prototype.moduleNameFromId = function(id) {
	var ipcName = this.builder.build("ipc.IPCName");
	//TODO: getModuleName;
	return new ipcName(id, "", "");
}

utils.extend(exports.IPCConnector, conn.Connector);
