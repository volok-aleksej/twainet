var utils = require('twainetUtils');
var module = require('twainetModule');
var conn = require('ipcConnector');
var net = require('net');

exports.IPCModule = function(name) {
	module.Module.call(this, name);

	this.moduleMap = {};
	this.ipcObjectMap = {};

	this.ip = "127.0.0.1";
	this.port = 0;
	this.isCoordinator = false;
}

exports.ipcCoordinatorName = "IPCCoordinator";

utils.extend(exports.IPCModule, module.Module);

exports.IPCModule.prototype.StartAsCoordinator = function() {
	var self = this;
	this.port = 2040;
	this.isCoordinator = true;
	this.server = net.createServer(function(c) {
		self.addConnector(conn.IPCConnector, c, utils.generateId(), exports.ipcCoordinatorName);
	});

	this.server.listen(this.port, "localhost", function() { //'listening' listener
		console.log('server bound as coordinator');
	});
}

exports.IPCModule.prototype.Start = function() {
	var self = this;
	this.isCoordinator = false;
	this.server = net.createServer(function(c) {
		self.addConnector(conn.IPCConnector, c, utils.generateId(), self.name);
	});

	this.server.listen(0, "localhost", function() { //'listening' listener
		var address = this.address();
		self.port = address.port;
		self.connectToCoordinator();
		console.log('server bound on port', self.port);
	});
}

exports.IPCModule.prototype.connectToCoordinator = function() {
	var self = this;
	var client = net.connect({host: "127.0.0.1", port: 2040}, function() { //'connect' listener
		console.log('client connected');
		self.addConnector(conn.IPCConnector, client, exports.ipcCoordinatorName, self.name);
	});

	client.on("error", function(){
		setTimeout(function(){
			self.connectToCoordinator();
		}, 1000);
	});
}

exports.IPCModule.prototype.addModuleName = function(name, options) {
	if(this.moduleMap[name] === undefined) {
		this.moduleMap[name] = options;
		return true;
	}
	console.log("ModuleName exist");
	return false;
}

exports.IPCModule.prototype.addIPCObject = function(name, options) {
	this.ipcObjectMap[name] = options;
}

exports.IPCModule.prototype.removeIPCObject = function(name) {
	if(this.moduleMap[name] !== undefined) {
		delete this.moduleMap[name];
	}
}

exports.IPCModule.prototype.changeConnectorId = function(oldId, newId) {
	module.Module.prototype.changeConnectorId.call(this, oldId, newId);
	if(this.moduleMap[oldId] !== undefined) {
		var moduleName = this.moduleMap[oldId];
		delete this.moduleMap[oldId];
		this.moduleMap[oldId] = moduleName;
	}
}

exports.IPCModule.prototype.onDestroy = function(conn) {
	module.Module.prototype.onDestroy.call(this, conn);
	if(this.moduleMap[conn.id] !== undefined && this.connMap[conn.id] === undefined) {
		delete this.moduleMap[conn.id];
	}
	console.log(this.moduleMap, this.connMap);

//	if(conn.id == exports.ipcCoordinatorName) {
//		this.connectToCoordinator();
//	}
}
