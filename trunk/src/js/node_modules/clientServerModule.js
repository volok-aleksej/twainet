var utils = require('twainetUtils');
var module = require('ipcModule');
var conn = require('clientServerConnector');
var net = require('net');
var udpServer = require('udpServer');

exports.ClientServerModule = function(name) {
	module.IPCModule.call(this, name);
}

exports.client = "ClientName";
exports.server = "ServerName";

utils.extend(exports.ClientServerModule, module.IPCModule);

exports.ClientServerModule.prototype.StartServer = function(port) {
	var self = this;
	var server = net.createServer(function(c) {
		self.addConnector(conn.ClientServerConnector, c, exports.client, exports.server);
	});

	server.listen(port, function() { //'listening' listener
		console.log('server bound');
	});
}

exports.ClientServerModule.prototype.Connect = function(host, port) {
	var self = this;
	var client = net.connect({host: host, port: port}, function() { //'connect' listener
		self.addConnector(conn.ClientServerConnector, client, exports.server, exports.client);
	});
}

exports.ClientServerModule.prototype.initTunnelServer = function(object, pbBuilder) {
	var extSessionId = object.get("ext_session_id"),
		ownSessionId = object.get("own_session_id"),
		initTunnelStarted = pbBuilder.build("client_server.InitTunnelStarted"),
		tunnelType = pbBuilder.build("client_server.TunnelType"),
		myMessageOne = new initTunnelStarted(ownSessionId, extSessionId),
		myMessageTwo = new initTunnelStarted(extSessionId, ownSessionId);
	this.notifyMessage(0, myMessageOne);
	this.notifyMessage(0, myMessageTwo);

	object.set("type", tunnelType.TUNNEL_LOCAL);
	this.notifyMessage(0, object);
	object.set("ext_session_id", ownSessionId);
	object.set("own_session_id", extSessionId);
	this.notifyMessage(0, object);

	var udpServer1 = new udpServer.udpServer(this);
	udpServer1.ownSessionId = ownSessionId;
	udpServer1.extSessionId = extSessionId;
	udpServer1.Start(pbBuilder);

	var udpServer2 = new udpServer.udpServer(this);
	udpServer2.ownSessionId = extSessionId;
	udpServer2.extSessionId = ownSessionId;
	udpServer2.Start(pbBuilder);

	
}