var dgram = require('dgram');
var os = require('os');

exports.udpServer = function(module) {
	this.module = module;
}

exports.udpServer.prototype.Start = function(pbBuilder) {
	var self = this,
		server = dgram.createSocket('udp4');

	this.pbBuilder = pbBuilder;

	server.on("listening", function () {
		var address = server.address(),
			addr = "",
			netInterface = os.networkInterfaces();
			
		for(var name in netInterface) {
			addr = netInterface[name][0].address;
			break;
		}

		self.sendInitTunnel({address: addr, port: address.port});
	});

	var lenData = 0,
		moduleName = "",
		stateEnum = {LENGTH_DATA: 0, MODULE_NAME: 1};
		state = stateEnum.LENGTH_DATA;
	server.on('message', function (data, rinfo) {
		if(state == stateEnum.LENGTH_DATA) {
			state = stateEnum.MODULE_NAME;
			lenData = data.readInt32LE(0);
		} else if(state == stateEnum.MODULE_NAME){
			state == stateEnum.LENGTH_DATA;
			moduleName = data.toString();
			if(moduleName == self.ownSessionId) {
				self.sendTryConnectTo(self.extSessionId, moduleName, rinfo);
				server.close();
			}
		}
	});

	server.on("error", function (err) {
		console.log("server error:\n" + err.stack);
		server.close();
	});

	server.bind(0);
}

exports.udpServer.prototype.sendInitTunnel = function(address) {
	var initTunnel = this.pbBuilder.build("client_server.InitTunnel"),
		tunnelConnectAddress = this.pbBuilder.build("client_server.TunnelConnectAddress"),
		tunnelType = this.pbBuilder.build("client_server.TunnelType");

	var myMessage = new initTunnel(this.extSessionId, this.ownSessionId, tunnelType.TUNNEL_EXTERNAL, new tunnelConnectAddress(address.address, address.port));
	this.module.notifyMessage(0, myMessage);
}

exports.udpServer.prototype.sendTryConnectTo = function(ownSessionId, extSessionId, address) {
	var tryConnectTo = this.pbBuilder.build("client_server.TryConnectTo"),
		tunnelConnectAddress = this.pbBuilder.build("client_server.TunnelConnectAddress"),
		tunnelType = this.pbBuilder.build("client_server.TunnelType");

	console.log("udp server created, address - " + address.address + ":" + address.port);

	var myMessage = new tryConnectTo(extSessionId, ownSessionId, tunnelType.TUNNEL_EXTERNAL, new tunnelConnectAddress(address.address, address.port));
	this.module.notifyMessage(0, myMessage);
}