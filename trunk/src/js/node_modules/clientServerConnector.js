var utils = require('twainetUtils');
var protobuf = require('protobufjs');
var conn = require('twainetConnector');

exports.ClientServerConnector = function(c, id) {
	var protoFilePath = "../messages/client_server.proto",
		self = this,
		protoMap = {},
		msgMap = {};

	conn.Connector.call(this, c, id);

	var handlers = function () {}
	handlers.prototype.Login = function(object) {
		console.info(object.get("name"));
		
		var newid = "cmaiofennmphjldldcpphcechfnnohja";
		self.module.changeConnectorId(self.id, newid);
		self.id = newid;
		
		var resultCode = self.builder.build("client_server.ResultCode"),
			loginResult = self.builder.build("client_server.LoginResult"),
			myMessage = new loginResult(resultCode.LOGIN_SUCCESS, self.id);
			self.sendMessage(myMessage);
	}
	handlers.prototype.LoginResult = function(object) {
		var resultCode = self.builder.build("client_server.ResultCode"),
			result = object.get("login_result"),
			newid = object.get("own_session_id");
			
		if(result == resultCode.LOGIN_SUCCESS){
			self.module.changeConnectorId(self.id, newid);
			self.id = newid;
		} else {
			self.destroy();
		}
	}
	handlers.prototype.InitTunnel = function(object) {
	}

	this.builder = protobuf.loadProtoFile(protoFilePath);
	protoMap = this.builder.build();
	this.messageMap = {};
	msgMap = this.generateMap(protoMap, handlers.prototype);
	for(message in msgMap) if(msgMap.hasOwnProperty(message)){
		this.messageMap[message] = msgMap[message];
	}

	this.start();
};

utils.extend(exports.ClientServerConnector, conn.Connector);