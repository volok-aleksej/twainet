var utils = require('twainetUtils');
var protobuf = require('protobufjs');
var conn = require('ipcConnector');

exports.ClientServerConnector = function(c, id) {
	var protoFilePath = "../messages/client_server.proto",
		self = this,
		protoMap = {},
		msgMap = {};

	conn.IPCConnector.call(this, c, id);

	//handlers of message that connector received from socket
	var handlers = function () {}
	handlers.prototype.Login = function(object) {
		console.info(object.get("name"));

		var resultCode = self.builder.build("client_server.ResultCode"),
			loginResult = self.builder.build("client_server.LoginResult"),
			myMessage = new loginResult(resultCode.LOGIN_SUCCESS, self.sessionId);
			self.sendMessage(myMessage);
	}
	handlers.prototype.LoginResult = function(object) {
		var resultCode = self.builder.build("client_server.ResultCode"),
			result = object.get("login_result"),
			newid = object.get("own_session_id");
			
		if(result == resultCode.LOGIN_SUCCESS){
			self.module.changeConnectorId(self.sessionId, newId);
			self.sessionId = newid;
		} else {
			self.destroy();
		}
	}
	handlers.prototype.InitTunnel = function(object) {

		if(self.id == self.module.client) {
			console.info("init new tunnel from " + object.get("own_session_id") + " to " + object.get("ext_session_id"));
			self.module.InitTunnelServer(object, self.builder);
		}
	}
	handlers.prototype.TryConnectTo = function(object) {
		if(self.id == self.module.client) {
			var extSessionId = object.get("ext_session_id"),
				ownSessionId = object.get("own_session_id");
			object.set("ext_session_id", ownSessionId);
			object.set("own_session_id", extSessionId);
			self.module.notifyMessage(self, object);
		}
	}

	//handlers of message that connector get from another connector
	var notifyHandlers = function(){}
	notifyHandlers.prototype.InitTunnelStarted = function(object) {
		var ownSessionId = object.get("own_session_id");
		if(ownSessionId == self.sessionId) {
			self.sendMessage(object);
		}
	}
	notifyHandlers.prototype.InitTunnel = function(object) {
		var ownSessionId = object.get("own_session_id");
		if(ownSessionId == self.sessionId) {
			self.sendMessage(object);
		}
	}
	notifyHandlers.prototype.TryConnectTo = function(object) {
		var ownSessionId = object.get("own_session_id");
		if(ownSessionId == self.sessionId) {
			self.sendMessage(object);
		}
	}

	this.sessionId = utils.generateId();
	protobuf.loadProtoFile(protoFilePath, this.builder);
	protoMap = this.builder.build();

	msgMap = this.generateMap(protoMap, handlers.prototype);
	for(message in msgMap) if(msgMap.hasOwnProperty(message)){
		this.messageMap[message] = msgMap[message];
	}

	msgMap = this.generateMap(protoMap, notifyHandlers.prototype);
	for(message in msgMap) if(msgMap.hasOwnProperty(message)){
		this.notifyMessageMap[message] = msgMap[message];
	}
};

utils.extend(exports.ClientServerConnector, conn.IPCConnector);