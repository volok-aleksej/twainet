// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_server.proto

#ifndef PROTOBUF_client_5fserver_2eproto__INCLUDED
#define PROTOBUF_client_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace client_server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_5fserver_2eproto();
void protobuf_AssignDesc_client_5fserver_2eproto();
void protobuf_ShutdownFile_client_5fserver_2eproto();

class Login;
class LoginResult;
class TunnelConnectAddress;
class InitTunnel;
class TryConnectTo;
class InitTunnelStarted;
class Test;

enum ResultCode {
  LOGIN_FAILURE = 1,
  LOGIN_SUCCESS = 2
};
bool ResultCode_IsValid(int value);
const ResultCode ResultCode_MIN = LOGIN_FAILURE;
const ResultCode ResultCode_MAX = LOGIN_SUCCESS;
const int ResultCode_ARRAYSIZE = ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultCode_descriptor();
inline const ::std::string& ResultCode_Name(ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultCode_descriptor(), value);
}
inline bool ResultCode_Parse(
    const ::std::string& name, ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultCode>(
    ResultCode_descriptor(), name, value);
}
enum TunnelType {
  TUNNEL_LOCAL = 1,
  TUNNEL_EXTERNAL = 2,
  TUNNEL_RELAY = 3
};
bool TunnelType_IsValid(int value);
const TunnelType TunnelType_MIN = TUNNEL_LOCAL;
const TunnelType TunnelType_MAX = TUNNEL_RELAY;
const int TunnelType_ARRAYSIZE = TunnelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TunnelType_descriptor();
inline const ::std::string& TunnelType_Name(TunnelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TunnelType_descriptor(), value);
}
inline bool TunnelType_Parse(
    const ::std::string& name, TunnelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TunnelType>(
    TunnelType_descriptor(), name, value);
}
// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string pasword = 2;
  inline bool has_pasword() const;
  inline void clear_pasword();
  static const int kPaswordFieldNumber = 2;
  inline const ::std::string& pasword() const;
  inline void set_pasword(const ::std::string& value);
  inline void set_pasword(const char* value);
  inline void set_pasword(const char* value, size_t size);
  inline ::std::string* mutable_pasword();
  inline ::std::string* release_pasword();
  inline void set_allocated_pasword(::std::string* pasword);

  // @@protoc_insertion_point(class_scope:client_server.Login)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pasword();
  inline void clear_has_pasword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* pasword_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fserver_2eproto();
  friend void protobuf_AssignDesc_client_5fserver_2eproto();
  friend void protobuf_ShutdownFile_client_5fserver_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class LoginResult : public ::google::protobuf::Message {
 public:
  LoginResult();
  virtual ~LoginResult();

  LoginResult(const LoginResult& from);

  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResult& default_instance();

  void Swap(LoginResult* other);

  // implements Message ----------------------------------------------

  LoginResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResult& from);
  void MergeFrom(const LoginResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client_server.ResultCode login_result = 1;
  inline bool has_login_result() const;
  inline void clear_login_result();
  static const int kLoginResultFieldNumber = 1;
  inline ::client_server::ResultCode login_result() const;
  inline void set_login_result(::client_server::ResultCode value);

  // optional string own_session_id = 2;
  inline bool has_own_session_id() const;
  inline void clear_own_session_id();
  static const int kOwnSessionIdFieldNumber = 2;
  inline const ::std::string& own_session_id() const;
  inline void set_own_session_id(const ::std::string& value);
  inline void set_own_session_id(const char* value);
  inline void set_own_session_id(const char* value, size_t size);
  inline ::std::string* mutable_own_session_id();
  inline ::std::string* release_own_session_id();
  inline void set_allocated_own_session_id(::std::string* own_session_id);

  // @@protoc_insertion_point(class_scope:client_server.LoginResult)
 private:
  inline void set_has_login_result();
  inline void clear_has_login_result();
  inline void set_has_own_session_id();
  inline void clear_has_own_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* own_session_id_;
  int login_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fserver_2eproto();
  friend void protobuf_AssignDesc_client_5fserver_2eproto();
  friend void protobuf_ShutdownFile_client_5fserver_2eproto();

  void InitAsDefaultInstance();
  static LoginResult* default_instance_;
};
// -------------------------------------------------------------------

class TunnelConnectAddress : public ::google::protobuf::Message {
 public:
  TunnelConnectAddress();
  virtual ~TunnelConnectAddress();

  TunnelConnectAddress(const TunnelConnectAddress& from);

  inline TunnelConnectAddress& operator=(const TunnelConnectAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TunnelConnectAddress& default_instance();

  void Swap(TunnelConnectAddress* other);

  // implements Message ----------------------------------------------

  TunnelConnectAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TunnelConnectAddress& from);
  void MergeFrom(const TunnelConnectAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client_server.TunnelConnectAddress)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fserver_2eproto();
  friend void protobuf_AssignDesc_client_5fserver_2eproto();
  friend void protobuf_ShutdownFile_client_5fserver_2eproto();

  void InitAsDefaultInstance();
  static TunnelConnectAddress* default_instance_;
};
// -------------------------------------------------------------------

class InitTunnel : public ::google::protobuf::Message {
 public:
  InitTunnel();
  virtual ~InitTunnel();

  InitTunnel(const InitTunnel& from);

  inline InitTunnel& operator=(const InitTunnel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitTunnel& default_instance();

  void Swap(InitTunnel* other);

  // implements Message ----------------------------------------------

  InitTunnel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitTunnel& from);
  void MergeFrom(const InitTunnel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ext_session_id = 1;
  inline bool has_ext_session_id() const;
  inline void clear_ext_session_id();
  static const int kExtSessionIdFieldNumber = 1;
  inline const ::std::string& ext_session_id() const;
  inline void set_ext_session_id(const ::std::string& value);
  inline void set_ext_session_id(const char* value);
  inline void set_ext_session_id(const char* value, size_t size);
  inline ::std::string* mutable_ext_session_id();
  inline ::std::string* release_ext_session_id();
  inline void set_allocated_ext_session_id(::std::string* ext_session_id);

  // required string own_session_id = 2;
  inline bool has_own_session_id() const;
  inline void clear_own_session_id();
  static const int kOwnSessionIdFieldNumber = 2;
  inline const ::std::string& own_session_id() const;
  inline void set_own_session_id(const ::std::string& value);
  inline void set_own_session_id(const char* value);
  inline void set_own_session_id(const char* value, size_t size);
  inline ::std::string* mutable_own_session_id();
  inline ::std::string* release_own_session_id();
  inline void set_allocated_own_session_id(::std::string* own_session_id);

  // optional .client_server.TunnelType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::client_server::TunnelType type() const;
  inline void set_type(::client_server::TunnelType value);

  // optional .client_server.TunnelConnectAddress address = 4;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 4;
  inline const ::client_server::TunnelConnectAddress& address() const;
  inline ::client_server::TunnelConnectAddress* mutable_address();
  inline ::client_server::TunnelConnectAddress* release_address();
  inline void set_allocated_address(::client_server::TunnelConnectAddress* address);

  // @@protoc_insertion_point(class_scope:client_server.InitTunnel)
 private:
  inline void set_has_ext_session_id();
  inline void clear_has_ext_session_id();
  inline void set_has_own_session_id();
  inline void clear_has_own_session_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ext_session_id_;
  ::std::string* own_session_id_;
  ::client_server::TunnelConnectAddress* address_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fserver_2eproto();
  friend void protobuf_AssignDesc_client_5fserver_2eproto();
  friend void protobuf_ShutdownFile_client_5fserver_2eproto();

  void InitAsDefaultInstance();
  static InitTunnel* default_instance_;
};
// -------------------------------------------------------------------

class TryConnectTo : public ::google::protobuf::Message {
 public:
  TryConnectTo();
  virtual ~TryConnectTo();

  TryConnectTo(const TryConnectTo& from);

  inline TryConnectTo& operator=(const TryConnectTo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TryConnectTo& default_instance();

  void Swap(TryConnectTo* other);

  // implements Message ----------------------------------------------

  TryConnectTo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TryConnectTo& from);
  void MergeFrom(const TryConnectTo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ext_session_id = 1;
  inline bool has_ext_session_id() const;
  inline void clear_ext_session_id();
  static const int kExtSessionIdFieldNumber = 1;
  inline const ::std::string& ext_session_id() const;
  inline void set_ext_session_id(const ::std::string& value);
  inline void set_ext_session_id(const char* value);
  inline void set_ext_session_id(const char* value, size_t size);
  inline ::std::string* mutable_ext_session_id();
  inline ::std::string* release_ext_session_id();
  inline void set_allocated_ext_session_id(::std::string* ext_session_id);

  // required string own_session_id = 2;
  inline bool has_own_session_id() const;
  inline void clear_own_session_id();
  static const int kOwnSessionIdFieldNumber = 2;
  inline const ::std::string& own_session_id() const;
  inline void set_own_session_id(const ::std::string& value);
  inline void set_own_session_id(const char* value);
  inline void set_own_session_id(const char* value, size_t size);
  inline ::std::string* mutable_own_session_id();
  inline ::std::string* release_own_session_id();
  inline void set_allocated_own_session_id(::std::string* own_session_id);

  // required .client_server.TunnelType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::client_server::TunnelType type() const;
  inline void set_type(::client_server::TunnelType value);

  // repeated .client_server.TunnelConnectAddress adresses = 4;
  inline int adresses_size() const;
  inline void clear_adresses();
  static const int kAdressesFieldNumber = 4;
  inline const ::client_server::TunnelConnectAddress& adresses(int index) const;
  inline ::client_server::TunnelConnectAddress* mutable_adresses(int index);
  inline ::client_server::TunnelConnectAddress* add_adresses();
  inline const ::google::protobuf::RepeatedPtrField< ::client_server::TunnelConnectAddress >&
      adresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::client_server::TunnelConnectAddress >*
      mutable_adresses();

  // @@protoc_insertion_point(class_scope:client_server.TryConnectTo)
 private:
  inline void set_has_ext_session_id();
  inline void clear_has_ext_session_id();
  inline void set_has_own_session_id();
  inline void clear_has_own_session_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ext_session_id_;
  ::std::string* own_session_id_;
  ::google::protobuf::RepeatedPtrField< ::client_server::TunnelConnectAddress > adresses_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fserver_2eproto();
  friend void protobuf_AssignDesc_client_5fserver_2eproto();
  friend void protobuf_ShutdownFile_client_5fserver_2eproto();

  void InitAsDefaultInstance();
  static TryConnectTo* default_instance_;
};
// -------------------------------------------------------------------

class InitTunnelStarted : public ::google::protobuf::Message {
 public:
  InitTunnelStarted();
  virtual ~InitTunnelStarted();

  InitTunnelStarted(const InitTunnelStarted& from);

  inline InitTunnelStarted& operator=(const InitTunnelStarted& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitTunnelStarted& default_instance();

  void Swap(InitTunnelStarted* other);

  // implements Message ----------------------------------------------

  InitTunnelStarted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitTunnelStarted& from);
  void MergeFrom(const InitTunnelStarted& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ext_session_id = 1;
  inline bool has_ext_session_id() const;
  inline void clear_ext_session_id();
  static const int kExtSessionIdFieldNumber = 1;
  inline const ::std::string& ext_session_id() const;
  inline void set_ext_session_id(const ::std::string& value);
  inline void set_ext_session_id(const char* value);
  inline void set_ext_session_id(const char* value, size_t size);
  inline ::std::string* mutable_ext_session_id();
  inline ::std::string* release_ext_session_id();
  inline void set_allocated_ext_session_id(::std::string* ext_session_id);

  // required string own_session_id = 2;
  inline bool has_own_session_id() const;
  inline void clear_own_session_id();
  static const int kOwnSessionIdFieldNumber = 2;
  inline const ::std::string& own_session_id() const;
  inline void set_own_session_id(const ::std::string& value);
  inline void set_own_session_id(const char* value);
  inline void set_own_session_id(const char* value, size_t size);
  inline ::std::string* mutable_own_session_id();
  inline ::std::string* release_own_session_id();
  inline void set_allocated_own_session_id(::std::string* own_session_id);

  // @@protoc_insertion_point(class_scope:client_server.InitTunnelStarted)
 private:
  inline void set_has_ext_session_id();
  inline void clear_has_ext_session_id();
  inline void set_has_own_session_id();
  inline void clear_has_own_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ext_session_id_;
  ::std::string* own_session_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_5fserver_2eproto();
  friend void protobuf_AssignDesc_client_5fserver_2eproto();
  friend void protobuf_ShutdownFile_client_5fserver_2eproto();

  void InitAsDefaultInstance();
  static InitTunnelStarted* default_instance_;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:client_server.Test)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_client_5fserver_2eproto();
  friend void protobuf_AssignDesc_client_5fserver_2eproto();
  friend void protobuf_ShutdownFile_client_5fserver_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// required string name = 1;
inline bool Login::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Login::name() const {
  return *name_;
}
inline void Login::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Login::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Login::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Login::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pasword = 2;
inline bool Login::has_pasword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_pasword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_pasword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_pasword() {
  if (pasword_ != &::google::protobuf::internal::kEmptyString) {
    pasword_->clear();
  }
  clear_has_pasword();
}
inline const ::std::string& Login::pasword() const {
  return *pasword_;
}
inline void Login::set_pasword(const ::std::string& value) {
  set_has_pasword();
  if (pasword_ == &::google::protobuf::internal::kEmptyString) {
    pasword_ = new ::std::string;
  }
  pasword_->assign(value);
}
inline void Login::set_pasword(const char* value) {
  set_has_pasword();
  if (pasword_ == &::google::protobuf::internal::kEmptyString) {
    pasword_ = new ::std::string;
  }
  pasword_->assign(value);
}
inline void Login::set_pasword(const char* value, size_t size) {
  set_has_pasword();
  if (pasword_ == &::google::protobuf::internal::kEmptyString) {
    pasword_ = new ::std::string;
  }
  pasword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_pasword() {
  set_has_pasword();
  if (pasword_ == &::google::protobuf::internal::kEmptyString) {
    pasword_ = new ::std::string;
  }
  return pasword_;
}
inline ::std::string* Login::release_pasword() {
  clear_has_pasword();
  if (pasword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pasword_;
    pasword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_pasword(::std::string* pasword) {
  if (pasword_ != &::google::protobuf::internal::kEmptyString) {
    delete pasword_;
  }
  if (pasword) {
    set_has_pasword();
    pasword_ = pasword;
  } else {
    clear_has_pasword();
    pasword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginResult

// required .client_server.ResultCode login_result = 1;
inline bool LoginResult::has_login_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResult::set_has_login_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResult::clear_has_login_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResult::clear_login_result() {
  login_result_ = 1;
  clear_has_login_result();
}
inline ::client_server::ResultCode LoginResult::login_result() const {
  return static_cast< ::client_server::ResultCode >(login_result_);
}
inline void LoginResult::set_login_result(::client_server::ResultCode value) {
  assert(::client_server::ResultCode_IsValid(value));
  set_has_login_result();
  login_result_ = value;
}

// optional string own_session_id = 2;
inline bool LoginResult::has_own_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResult::set_has_own_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResult::clear_has_own_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResult::clear_own_session_id() {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    own_session_id_->clear();
  }
  clear_has_own_session_id();
}
inline const ::std::string& LoginResult::own_session_id() const {
  return *own_session_id_;
}
inline void LoginResult::set_own_session_id(const ::std::string& value) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(value);
}
inline void LoginResult::set_own_session_id(const char* value) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(value);
}
inline void LoginResult::set_own_session_id(const char* value, size_t size) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResult::mutable_own_session_id() {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  return own_session_id_;
}
inline ::std::string* LoginResult::release_own_session_id() {
  clear_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = own_session_id_;
    own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResult::set_allocated_own_session_id(::std::string* own_session_id) {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete own_session_id_;
  }
  if (own_session_id) {
    set_has_own_session_id();
    own_session_id_ = own_session_id;
  } else {
    clear_has_own_session_id();
    own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TunnelConnectAddress

// optional string ip = 1;
inline bool TunnelConnectAddress::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TunnelConnectAddress::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TunnelConnectAddress::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TunnelConnectAddress::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& TunnelConnectAddress::ip() const {
  return *ip_;
}
inline void TunnelConnectAddress::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TunnelConnectAddress::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void TunnelConnectAddress::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TunnelConnectAddress::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* TunnelConnectAddress::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TunnelConnectAddress::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 2;
inline bool TunnelConnectAddress::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TunnelConnectAddress::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TunnelConnectAddress::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TunnelConnectAddress::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 TunnelConnectAddress::port() const {
  return port_;
}
inline void TunnelConnectAddress::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// InitTunnel

// required string ext_session_id = 1;
inline bool InitTunnel::has_ext_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitTunnel::set_has_ext_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitTunnel::clear_has_ext_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitTunnel::clear_ext_session_id() {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    ext_session_id_->clear();
  }
  clear_has_ext_session_id();
}
inline const ::std::string& InitTunnel::ext_session_id() const {
  return *ext_session_id_;
}
inline void InitTunnel::set_ext_session_id(const ::std::string& value) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(value);
}
inline void InitTunnel::set_ext_session_id(const char* value) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(value);
}
inline void InitTunnel::set_ext_session_id(const char* value, size_t size) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitTunnel::mutable_ext_session_id() {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  return ext_session_id_;
}
inline ::std::string* InitTunnel::release_ext_session_id() {
  clear_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_session_id_;
    ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitTunnel::set_allocated_ext_session_id(::std::string* ext_session_id) {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_session_id_;
  }
  if (ext_session_id) {
    set_has_ext_session_id();
    ext_session_id_ = ext_session_id;
  } else {
    clear_has_ext_session_id();
    ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string own_session_id = 2;
inline bool InitTunnel::has_own_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitTunnel::set_has_own_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitTunnel::clear_has_own_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitTunnel::clear_own_session_id() {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    own_session_id_->clear();
  }
  clear_has_own_session_id();
}
inline const ::std::string& InitTunnel::own_session_id() const {
  return *own_session_id_;
}
inline void InitTunnel::set_own_session_id(const ::std::string& value) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(value);
}
inline void InitTunnel::set_own_session_id(const char* value) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(value);
}
inline void InitTunnel::set_own_session_id(const char* value, size_t size) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitTunnel::mutable_own_session_id() {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  return own_session_id_;
}
inline ::std::string* InitTunnel::release_own_session_id() {
  clear_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = own_session_id_;
    own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitTunnel::set_allocated_own_session_id(::std::string* own_session_id) {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete own_session_id_;
  }
  if (own_session_id) {
    set_has_own_session_id();
    own_session_id_ = own_session_id;
  } else {
    clear_has_own_session_id();
    own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client_server.TunnelType type = 3;
inline bool InitTunnel::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitTunnel::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitTunnel::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitTunnel::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client_server::TunnelType InitTunnel::type() const {
  return static_cast< ::client_server::TunnelType >(type_);
}
inline void InitTunnel::set_type(::client_server::TunnelType value) {
  assert(::client_server::TunnelType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .client_server.TunnelConnectAddress address = 4;
inline bool InitTunnel::has_address() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitTunnel::set_has_address() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitTunnel::clear_has_address() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitTunnel::clear_address() {
  if (address_ != NULL) address_->::client_server::TunnelConnectAddress::Clear();
  clear_has_address();
}
inline const ::client_server::TunnelConnectAddress& InitTunnel::address() const {
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::client_server::TunnelConnectAddress* InitTunnel::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::client_server::TunnelConnectAddress;
  return address_;
}
inline ::client_server::TunnelConnectAddress* InitTunnel::release_address() {
  clear_has_address();
  ::client_server::TunnelConnectAddress* temp = address_;
  address_ = NULL;
  return temp;
}
inline void InitTunnel::set_allocated_address(::client_server::TunnelConnectAddress* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
}

// -------------------------------------------------------------------

// TryConnectTo

// required string ext_session_id = 1;
inline bool TryConnectTo::has_ext_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TryConnectTo::set_has_ext_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TryConnectTo::clear_has_ext_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TryConnectTo::clear_ext_session_id() {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    ext_session_id_->clear();
  }
  clear_has_ext_session_id();
}
inline const ::std::string& TryConnectTo::ext_session_id() const {
  return *ext_session_id_;
}
inline void TryConnectTo::set_ext_session_id(const ::std::string& value) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(value);
}
inline void TryConnectTo::set_ext_session_id(const char* value) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(value);
}
inline void TryConnectTo::set_ext_session_id(const char* value, size_t size) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TryConnectTo::mutable_ext_session_id() {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  return ext_session_id_;
}
inline ::std::string* TryConnectTo::release_ext_session_id() {
  clear_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_session_id_;
    ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TryConnectTo::set_allocated_ext_session_id(::std::string* ext_session_id) {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_session_id_;
  }
  if (ext_session_id) {
    set_has_ext_session_id();
    ext_session_id_ = ext_session_id;
  } else {
    clear_has_ext_session_id();
    ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string own_session_id = 2;
inline bool TryConnectTo::has_own_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TryConnectTo::set_has_own_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TryConnectTo::clear_has_own_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TryConnectTo::clear_own_session_id() {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    own_session_id_->clear();
  }
  clear_has_own_session_id();
}
inline const ::std::string& TryConnectTo::own_session_id() const {
  return *own_session_id_;
}
inline void TryConnectTo::set_own_session_id(const ::std::string& value) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(value);
}
inline void TryConnectTo::set_own_session_id(const char* value) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(value);
}
inline void TryConnectTo::set_own_session_id(const char* value, size_t size) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TryConnectTo::mutable_own_session_id() {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  return own_session_id_;
}
inline ::std::string* TryConnectTo::release_own_session_id() {
  clear_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = own_session_id_;
    own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TryConnectTo::set_allocated_own_session_id(::std::string* own_session_id) {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete own_session_id_;
  }
  if (own_session_id) {
    set_has_own_session_id();
    own_session_id_ = own_session_id;
  } else {
    clear_has_own_session_id();
    own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .client_server.TunnelType type = 3;
inline bool TryConnectTo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TryConnectTo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TryConnectTo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TryConnectTo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client_server::TunnelType TryConnectTo::type() const {
  return static_cast< ::client_server::TunnelType >(type_);
}
inline void TryConnectTo::set_type(::client_server::TunnelType value) {
  assert(::client_server::TunnelType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .client_server.TunnelConnectAddress adresses = 4;
inline int TryConnectTo::adresses_size() const {
  return adresses_.size();
}
inline void TryConnectTo::clear_adresses() {
  adresses_.Clear();
}
inline const ::client_server::TunnelConnectAddress& TryConnectTo::adresses(int index) const {
  return adresses_.Get(index);
}
inline ::client_server::TunnelConnectAddress* TryConnectTo::mutable_adresses(int index) {
  return adresses_.Mutable(index);
}
inline ::client_server::TunnelConnectAddress* TryConnectTo::add_adresses() {
  return adresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client_server::TunnelConnectAddress >&
TryConnectTo::adresses() const {
  return adresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::client_server::TunnelConnectAddress >*
TryConnectTo::mutable_adresses() {
  return &adresses_;
}

// -------------------------------------------------------------------

// InitTunnelStarted

// required string ext_session_id = 1;
inline bool InitTunnelStarted::has_ext_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitTunnelStarted::set_has_ext_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitTunnelStarted::clear_has_ext_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitTunnelStarted::clear_ext_session_id() {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    ext_session_id_->clear();
  }
  clear_has_ext_session_id();
}
inline const ::std::string& InitTunnelStarted::ext_session_id() const {
  return *ext_session_id_;
}
inline void InitTunnelStarted::set_ext_session_id(const ::std::string& value) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(value);
}
inline void InitTunnelStarted::set_ext_session_id(const char* value) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(value);
}
inline void InitTunnelStarted::set_ext_session_id(const char* value, size_t size) {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  ext_session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitTunnelStarted::mutable_ext_session_id() {
  set_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    ext_session_id_ = new ::std::string;
  }
  return ext_session_id_;
}
inline ::std::string* InitTunnelStarted::release_ext_session_id() {
  clear_has_ext_session_id();
  if (ext_session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_session_id_;
    ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitTunnelStarted::set_allocated_ext_session_id(::std::string* ext_session_id) {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_session_id_;
  }
  if (ext_session_id) {
    set_has_ext_session_id();
    ext_session_id_ = ext_session_id;
  } else {
    clear_has_ext_session_id();
    ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string own_session_id = 2;
inline bool InitTunnelStarted::has_own_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitTunnelStarted::set_has_own_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitTunnelStarted::clear_has_own_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitTunnelStarted::clear_own_session_id() {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    own_session_id_->clear();
  }
  clear_has_own_session_id();
}
inline const ::std::string& InitTunnelStarted::own_session_id() const {
  return *own_session_id_;
}
inline void InitTunnelStarted::set_own_session_id(const ::std::string& value) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(value);
}
inline void InitTunnelStarted::set_own_session_id(const char* value) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(value);
}
inline void InitTunnelStarted::set_own_session_id(const char* value, size_t size) {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  own_session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitTunnelStarted::mutable_own_session_id() {
  set_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    own_session_id_ = new ::std::string;
  }
  return own_session_id_;
}
inline ::std::string* InitTunnelStarted::release_own_session_id() {
  clear_has_own_session_id();
  if (own_session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = own_session_id_;
    own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitTunnelStarted::set_allocated_own_session_id(::std::string* own_session_id) {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete own_session_id_;
  }
  if (own_session_id) {
    set_has_own_session_id();
    own_session_id_ = own_session_id;
  } else {
    clear_has_own_session_id();
    own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Test


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_server

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client_server::ResultCode>() {
  return ::client_server::ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client_server::TunnelType>() {
  return ::client_server::TunnelType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_5fserver_2eproto__INCLUDED
