// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client_server {

namespace {

const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TunnelConnectAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TunnelConnectAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitTunnel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitTunnel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TryConnectTo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TryConnectTo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitTunnelStarted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitTunnelStarted_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TunnelType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_5fserver_2eproto() {
  protobuf_AddDesc_client_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client_server.proto");
  GOOGLE_CHECK(file != NULL);
  Login_descriptor_ = file->message_type(0);
  static const int Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, pasword_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  LoginResult_descriptor_ = file->message_type(1);
  static const int LoginResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, login_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, own_session_id_),
  };
  LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResult_descriptor_,
      LoginResult::default_instance_,
      LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResult));
  TunnelConnectAddress_descriptor_ = file->message_type(2);
  static const int TunnelConnectAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunnelConnectAddress, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunnelConnectAddress, port_),
  };
  TunnelConnectAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TunnelConnectAddress_descriptor_,
      TunnelConnectAddress::default_instance_,
      TunnelConnectAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunnelConnectAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TunnelConnectAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TunnelConnectAddress));
  InitTunnel_descriptor_ = file->message_type(3);
  static const int InitTunnel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnel, ext_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnel, own_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnel, address_),
  };
  InitTunnel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitTunnel_descriptor_,
      InitTunnel::default_instance_,
      InitTunnel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitTunnel));
  TryConnectTo_descriptor_ = file->message_type(4);
  static const int TryConnectTo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryConnectTo, ext_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryConnectTo, own_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryConnectTo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryConnectTo, adresses_),
  };
  TryConnectTo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TryConnectTo_descriptor_,
      TryConnectTo::default_instance_,
      TryConnectTo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryConnectTo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryConnectTo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TryConnectTo));
  InitTunnelStarted_descriptor_ = file->message_type(5);
  static const int InitTunnelStarted_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnelStarted, ext_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnelStarted, own_session_id_),
  };
  InitTunnelStarted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitTunnelStarted_descriptor_,
      InitTunnelStarted::default_instance_,
      InitTunnelStarted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnelStarted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitTunnelStarted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitTunnelStarted));
  Test_descriptor_ = file->message_type(6);
  static const int Test_offsets_[1] = {
  };
  Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_descriptor_,
      Test::default_instance_,
      Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test));
  ResultCode_descriptor_ = file->enum_type(0);
  TunnelType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResult_descriptor_, &LoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TunnelConnectAddress_descriptor_, &TunnelConnectAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitTunnel_descriptor_, &InitTunnel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TryConnectTo_descriptor_, &TryConnectTo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitTunnelStarted_descriptor_, &InitTunnelStarted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_descriptor_, &Test::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_5fserver_2eproto() {
  delete Login::default_instance_;
  delete Login_reflection_;
  delete LoginResult::default_instance_;
  delete LoginResult_reflection_;
  delete TunnelConnectAddress::default_instance_;
  delete TunnelConnectAddress_reflection_;
  delete InitTunnel::default_instance_;
  delete InitTunnel_reflection_;
  delete TryConnectTo::default_instance_;
  delete TryConnectTo_reflection_;
  delete InitTunnelStarted::default_instance_;
  delete InitTunnelStarted_reflection_;
  delete Test::default_instance_;
  delete Test_reflection_;
}

void protobuf_AddDesc_client_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client_server.proto\022\rclient_server\"&\n\005"
    "Login\022\014\n\004name\030\001 \002(\t\022\017\n\007pasword\030\002 \002(\t\"V\n\013"
    "LoginResult\022/\n\014login_result\030\001 \002(\0162\031.clie"
    "nt_server.ResultCode\022\026\n\016own_session_id\030\002"
    " \001(\t\"0\n\024TunnelConnectAddress\022\n\n\002ip\030\001 \001(\t"
    "\022\014\n\004port\030\002 \001(\005\"\233\001\n\nInitTunnel\022\026\n\016ext_ses"
    "sion_id\030\001 \002(\t\022\026\n\016own_session_id\030\002 \002(\t\022\'\n"
    "\004type\030\003 \001(\0162\031.client_server.TunnelType\0224"
    "\n\007address\030\004 \001(\0132#.client_server.TunnelCo"
    "nnectAddress\"\236\001\n\014TryConnectTo\022\026\n\016ext_ses"
    "sion_id\030\001 \002(\t\022\026\n\016own_session_id\030\002 \002(\t\022\'\n"
    "\004type\030\003 \002(\0162\031.client_server.TunnelType\0225"
    "\n\010adresses\030\004 \003(\0132#.client_server.TunnelC"
    "onnectAddress\"C\n\021InitTunnelStarted\022\026\n\016ex"
    "t_session_id\030\001 \002(\t\022\026\n\016own_session_id\030\002 \002"
    "(\t\"\006\n\004Test*2\n\nResultCode\022\021\n\rLOGIN_FAILUR"
    "E\020\001\022\021\n\rLOGIN_SUCCESS\020\002*E\n\nTunnelType\022\020\n\014"
    "TUNNEL_LOCAL\020\001\022\023\n\017TUNNEL_EXTERNAL\020\002\022\020\n\014T"
    "UNNEL_RELAY\020\003", 733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_server.proto", &protobuf_RegisterTypes);
  Login::default_instance_ = new Login();
  LoginResult::default_instance_ = new LoginResult();
  TunnelConnectAddress::default_instance_ = new TunnelConnectAddress();
  InitTunnel::default_instance_ = new InitTunnel();
  TryConnectTo::default_instance_ = new TryConnectTo();
  InitTunnelStarted::default_instance_ = new InitTunnelStarted();
  Test::default_instance_ = new Test();
  Login::default_instance_->InitAsDefaultInstance();
  LoginResult::default_instance_->InitAsDefaultInstance();
  TunnelConnectAddress::default_instance_->InitAsDefaultInstance();
  InitTunnel::default_instance_->InitAsDefaultInstance();
  TryConnectTo::default_instance_->InitAsDefaultInstance();
  InitTunnelStarted::default_instance_->InitAsDefaultInstance();
  Test::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fserver_2eproto {
  StaticDescriptorInitializer_client_5fserver_2eproto() {
    protobuf_AddDesc_client_5fserver_2eproto();
  }
} static_descriptor_initializer_client_5fserver_2eproto_;
const ::google::protobuf::EnumDescriptor* ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultCode_descriptor_;
}
bool ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TunnelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TunnelType_descriptor_;
}
bool TunnelType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kNameFieldNumber;
const int Login::kPaswordFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pasword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  SharedDtor();
}

void Login::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pasword_ != &::google::protobuf::internal::kEmptyString) {
    delete pasword_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fserver_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pasword()) {
      if (pasword_ != &::google::protobuf::internal::kEmptyString) {
        pasword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pasword;
        break;
      }

      // required string pasword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pasword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pasword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pasword().data(), this->pasword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string pasword = 2;
  if (has_pasword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pasword().data(), this->pasword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pasword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string pasword = 2;
  if (has_pasword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pasword().data(), this->pasword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pasword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string pasword = 2;
    if (has_pasword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pasword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pasword()) {
      set_pasword(from.pasword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pasword_, other->pasword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResult::kLoginResultFieldNumber;
const int LoginResult::kOwnSessionIdFieldNumber;
#endif  // !_MSC_VER

LoginResult::LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResult::InitAsDefaultInstance() {
}

LoginResult::LoginResult(const LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResult::SharedCtor() {
  _cached_size_ = 0;
  login_result_ = 1;
  own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResult::~LoginResult() {
  SharedDtor();
}

void LoginResult::SharedDtor() {
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete own_session_id_;
  }
  if (this != default_instance_) {
  }
}

void LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}

const LoginResult& LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fserver_2eproto();
  return *default_instance_;
}

LoginResult* LoginResult::default_instance_ = NULL;

LoginResult* LoginResult::New() const {
  return new LoginResult;
}

void LoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    login_result_ = 1;
    if (has_own_session_id()) {
      if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
        own_session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client_server.ResultCode login_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_server::ResultCode_IsValid(value)) {
            set_login_result(static_cast< ::client_server::ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_own_session_id;
        break;
      }

      // optional string own_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_own_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_own_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->own_session_id().data(), this->own_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client_server.ResultCode login_result = 1;
  if (has_login_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->login_result(), output);
  }

  // optional string own_session_id = 2;
  if (has_own_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->own_session_id().data(), this->own_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->own_session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client_server.ResultCode login_result = 1;
  if (has_login_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->login_result(), target);
  }

  // optional string own_session_id = 2;
  if (has_own_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->own_session_id().data(), this->own_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->own_session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client_server.ResultCode login_result = 1;
    if (has_login_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->login_result());
    }

    // optional string own_session_id = 2;
    if (has_own_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->own_session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResult::MergeFrom(const LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_result()) {
      set_login_result(from.login_result());
    }
    if (from.has_own_session_id()) {
      set_own_session_id(from.own_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResult::CopyFrom(const LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResult::Swap(LoginResult* other) {
  if (other != this) {
    std::swap(login_result_, other->login_result_);
    std::swap(own_session_id_, other->own_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResult_descriptor_;
  metadata.reflection = LoginResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TunnelConnectAddress::kIpFieldNumber;
const int TunnelConnectAddress::kPortFieldNumber;
#endif  // !_MSC_VER

TunnelConnectAddress::TunnelConnectAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TunnelConnectAddress::InitAsDefaultInstance() {
}

TunnelConnectAddress::TunnelConnectAddress(const TunnelConnectAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TunnelConnectAddress::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TunnelConnectAddress::~TunnelConnectAddress() {
  SharedDtor();
}

void TunnelConnectAddress::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void TunnelConnectAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TunnelConnectAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TunnelConnectAddress_descriptor_;
}

const TunnelConnectAddress& TunnelConnectAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fserver_2eproto();
  return *default_instance_;
}

TunnelConnectAddress* TunnelConnectAddress::default_instance_ = NULL;

TunnelConnectAddress* TunnelConnectAddress::New() const {
  return new TunnelConnectAddress;
}

void TunnelConnectAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TunnelConnectAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TunnelConnectAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TunnelConnectAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TunnelConnectAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TunnelConnectAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TunnelConnectAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TunnelConnectAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TunnelConnectAddress::MergeFrom(const TunnelConnectAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TunnelConnectAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelConnectAddress::CopyFrom(const TunnelConnectAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelConnectAddress::IsInitialized() const {

  return true;
}

void TunnelConnectAddress::Swap(TunnelConnectAddress* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TunnelConnectAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TunnelConnectAddress_descriptor_;
  metadata.reflection = TunnelConnectAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitTunnel::kExtSessionIdFieldNumber;
const int InitTunnel::kOwnSessionIdFieldNumber;
const int InitTunnel::kTypeFieldNumber;
const int InitTunnel::kAddressFieldNumber;
#endif  // !_MSC_VER

InitTunnel::InitTunnel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitTunnel::InitAsDefaultInstance() {
  address_ = const_cast< ::client_server::TunnelConnectAddress*>(&::client_server::TunnelConnectAddress::default_instance());
}

InitTunnel::InitTunnel(const InitTunnel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitTunnel::SharedCtor() {
  _cached_size_ = 0;
  ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitTunnel::~InitTunnel() {
  SharedDtor();
}

void InitTunnel::SharedDtor() {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_session_id_;
  }
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete own_session_id_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void InitTunnel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitTunnel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitTunnel_descriptor_;
}

const InitTunnel& InitTunnel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fserver_2eproto();
  return *default_instance_;
}

InitTunnel* InitTunnel::default_instance_ = NULL;

InitTunnel* InitTunnel::New() const {
  return new InitTunnel;
}

void InitTunnel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ext_session_id()) {
      if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
        ext_session_id_->clear();
      }
    }
    if (has_own_session_id()) {
      if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
        own_session_id_->clear();
      }
    }
    type_ = 1;
    if (has_address()) {
      if (address_ != NULL) address_->::client_server::TunnelConnectAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitTunnel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ext_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ext_session_id().data(), this->ext_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_own_session_id;
        break;
      }

      // required string own_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_own_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_own_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->own_session_id().data(), this->own_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .client_server.TunnelType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_server::TunnelType_IsValid(value)) {
            set_type(static_cast< ::client_server::TunnelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional .client_server.TunnelConnectAddress address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitTunnel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ext_session_id = 1;
  if (has_ext_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_session_id().data(), this->ext_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ext_session_id(), output);
  }

  // required string own_session_id = 2;
  if (has_own_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->own_session_id().data(), this->own_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->own_session_id(), output);
  }

  // optional .client_server.TunnelType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .client_server.TunnelConnectAddress address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitTunnel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ext_session_id = 1;
  if (has_ext_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_session_id().data(), this->ext_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext_session_id(), target);
  }

  // required string own_session_id = 2;
  if (has_own_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->own_session_id().data(), this->own_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->own_session_id(), target);
  }

  // optional .client_server.TunnelType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .client_server.TunnelConnectAddress address = 4;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitTunnel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ext_session_id = 1;
    if (has_ext_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext_session_id());
    }

    // required string own_session_id = 2;
    if (has_own_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->own_session_id());
    }

    // optional .client_server.TunnelType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .client_server.TunnelConnectAddress address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitTunnel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitTunnel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitTunnel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitTunnel::MergeFrom(const InitTunnel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ext_session_id()) {
      set_ext_session_id(from.ext_session_id());
    }
    if (from.has_own_session_id()) {
      set_own_session_id(from.own_session_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_address()) {
      mutable_address()->::client_server::TunnelConnectAddress::MergeFrom(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitTunnel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitTunnel::CopyFrom(const InitTunnel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitTunnel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitTunnel::Swap(InitTunnel* other) {
  if (other != this) {
    std::swap(ext_session_id_, other->ext_session_id_);
    std::swap(own_session_id_, other->own_session_id_);
    std::swap(type_, other->type_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitTunnel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitTunnel_descriptor_;
  metadata.reflection = InitTunnel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TryConnectTo::kExtSessionIdFieldNumber;
const int TryConnectTo::kOwnSessionIdFieldNumber;
const int TryConnectTo::kTypeFieldNumber;
const int TryConnectTo::kAdressesFieldNumber;
#endif  // !_MSC_VER

TryConnectTo::TryConnectTo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TryConnectTo::InitAsDefaultInstance() {
}

TryConnectTo::TryConnectTo(const TryConnectTo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TryConnectTo::SharedCtor() {
  _cached_size_ = 0;
  ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TryConnectTo::~TryConnectTo() {
  SharedDtor();
}

void TryConnectTo::SharedDtor() {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_session_id_;
  }
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete own_session_id_;
  }
  if (this != default_instance_) {
  }
}

void TryConnectTo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TryConnectTo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TryConnectTo_descriptor_;
}

const TryConnectTo& TryConnectTo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fserver_2eproto();
  return *default_instance_;
}

TryConnectTo* TryConnectTo::default_instance_ = NULL;

TryConnectTo* TryConnectTo::New() const {
  return new TryConnectTo;
}

void TryConnectTo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ext_session_id()) {
      if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
        ext_session_id_->clear();
      }
    }
    if (has_own_session_id()) {
      if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
        own_session_id_->clear();
      }
    }
    type_ = 1;
  }
  adresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TryConnectTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ext_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ext_session_id().data(), this->ext_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_own_session_id;
        break;
      }

      // required string own_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_own_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_own_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->own_session_id().data(), this->own_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .client_server.TunnelType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client_server::TunnelType_IsValid(value)) {
            set_type(static_cast< ::client_server::TunnelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adresses;
        break;
      }

      // repeated .client_server.TunnelConnectAddress adresses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adresses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adresses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TryConnectTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ext_session_id = 1;
  if (has_ext_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_session_id().data(), this->ext_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ext_session_id(), output);
  }

  // required string own_session_id = 2;
  if (has_own_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->own_session_id().data(), this->own_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->own_session_id(), output);
  }

  // required .client_server.TunnelType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .client_server.TunnelConnectAddress adresses = 4;
  for (int i = 0; i < this->adresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->adresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TryConnectTo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ext_session_id = 1;
  if (has_ext_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_session_id().data(), this->ext_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext_session_id(), target);
  }

  // required string own_session_id = 2;
  if (has_own_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->own_session_id().data(), this->own_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->own_session_id(), target);
  }

  // required .client_server.TunnelType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .client_server.TunnelConnectAddress adresses = 4;
  for (int i = 0; i < this->adresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->adresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TryConnectTo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ext_session_id = 1;
    if (has_ext_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext_session_id());
    }

    // required string own_session_id = 2;
    if (has_own_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->own_session_id());
    }

    // required .client_server.TunnelType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .client_server.TunnelConnectAddress adresses = 4;
  total_size += 1 * this->adresses_size();
  for (int i = 0; i < this->adresses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TryConnectTo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TryConnectTo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TryConnectTo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TryConnectTo::MergeFrom(const TryConnectTo& from) {
  GOOGLE_CHECK_NE(&from, this);
  adresses_.MergeFrom(from.adresses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ext_session_id()) {
      set_ext_session_id(from.ext_session_id());
    }
    if (from.has_own_session_id()) {
      set_own_session_id(from.own_session_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TryConnectTo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryConnectTo::CopyFrom(const TryConnectTo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryConnectTo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TryConnectTo::Swap(TryConnectTo* other) {
  if (other != this) {
    std::swap(ext_session_id_, other->ext_session_id_);
    std::swap(own_session_id_, other->own_session_id_);
    std::swap(type_, other->type_);
    adresses_.Swap(&other->adresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TryConnectTo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TryConnectTo_descriptor_;
  metadata.reflection = TryConnectTo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitTunnelStarted::kExtSessionIdFieldNumber;
const int InitTunnelStarted::kOwnSessionIdFieldNumber;
#endif  // !_MSC_VER

InitTunnelStarted::InitTunnelStarted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitTunnelStarted::InitAsDefaultInstance() {
}

InitTunnelStarted::InitTunnelStarted(const InitTunnelStarted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitTunnelStarted::SharedCtor() {
  _cached_size_ = 0;
  ext_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  own_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitTunnelStarted::~InitTunnelStarted() {
  SharedDtor();
}

void InitTunnelStarted::SharedDtor() {
  if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_session_id_;
  }
  if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete own_session_id_;
  }
  if (this != default_instance_) {
  }
}

void InitTunnelStarted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitTunnelStarted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitTunnelStarted_descriptor_;
}

const InitTunnelStarted& InitTunnelStarted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fserver_2eproto();
  return *default_instance_;
}

InitTunnelStarted* InitTunnelStarted::default_instance_ = NULL;

InitTunnelStarted* InitTunnelStarted::New() const {
  return new InitTunnelStarted;
}

void InitTunnelStarted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ext_session_id()) {
      if (ext_session_id_ != &::google::protobuf::internal::kEmptyString) {
        ext_session_id_->clear();
      }
    }
    if (has_own_session_id()) {
      if (own_session_id_ != &::google::protobuf::internal::kEmptyString) {
        own_session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitTunnelStarted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ext_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ext_session_id().data(), this->ext_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_own_session_id;
        break;
      }

      // required string own_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_own_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_own_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->own_session_id().data(), this->own_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitTunnelStarted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ext_session_id = 1;
  if (has_ext_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_session_id().data(), this->ext_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ext_session_id(), output);
  }

  // required string own_session_id = 2;
  if (has_own_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->own_session_id().data(), this->own_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->own_session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitTunnelStarted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ext_session_id = 1;
  if (has_ext_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_session_id().data(), this->ext_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ext_session_id(), target);
  }

  // required string own_session_id = 2;
  if (has_own_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->own_session_id().data(), this->own_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->own_session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitTunnelStarted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ext_session_id = 1;
    if (has_ext_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext_session_id());
    }

    // required string own_session_id = 2;
    if (has_own_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->own_session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitTunnelStarted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitTunnelStarted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitTunnelStarted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitTunnelStarted::MergeFrom(const InitTunnelStarted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ext_session_id()) {
      set_ext_session_id(from.ext_session_id());
    }
    if (from.has_own_session_id()) {
      set_own_session_id(from.own_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitTunnelStarted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitTunnelStarted::CopyFrom(const InitTunnelStarted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitTunnelStarted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InitTunnelStarted::Swap(InitTunnelStarted* other) {
  if (other != this) {
    std::swap(ext_session_id_, other->ext_session_id_);
    std::swap(own_session_id_, other->own_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitTunnelStarted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitTunnelStarted_descriptor_;
  metadata.reflection = InitTunnelStarted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Test::Test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Test::InitAsDefaultInstance() {
}

Test::Test(const Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Test::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test::~Test() {
  SharedDtor();
}

void Test::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_descriptor_;
}

const Test& Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fserver_2eproto();
  return *default_instance_;
}

Test* Test::default_instance_ = NULL;

Test* Test::New() const {
  return new Test;
}

void Test::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Test::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {

  return true;
}

void Test::Swap(Test* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_descriptor_;
  metadata.reflection = Test_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_server

// @@protoc_insertion_point(global_scope)
