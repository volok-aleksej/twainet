// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ipc {

namespace {

const ::google::protobuf::Descriptor* IPCName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCName_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddIPCObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddIPCObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateIPCObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateIPCObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeIPCName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeIPCName_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPCObjectList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCObjectList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveIPCObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveIPCObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPCMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPCMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ipc_2eproto() {
  protobuf_AddDesc_ipc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ipc.proto");
  GOOGLE_CHECK(file != NULL);
  IPCName_descriptor_ = file->message_type(0);
  static const int IPCName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCName, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCName, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCName, suffix_),
  };
  IPCName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPCName_descriptor_,
      IPCName::default_instance_,
      IPCName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPCName));
  AddIPCObject_descriptor_ = file->message_type(1);
  static const int AddIPCObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddIPCObject, ipc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddIPCObject, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddIPCObject, port_),
  };
  AddIPCObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddIPCObject_descriptor_,
      AddIPCObject::default_instance_,
      AddIPCObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddIPCObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddIPCObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddIPCObject));
  UpdateIPCObject_descriptor_ = file->message_type(2);
  static const int UpdateIPCObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateIPCObject, ipc_old_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateIPCObject, ipc_new_name_),
  };
  UpdateIPCObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateIPCObject_descriptor_,
      UpdateIPCObject::default_instance_,
      UpdateIPCObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateIPCObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateIPCObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateIPCObject));
  ChangeIPCName_descriptor_ = file->message_type(3);
  static const int ChangeIPCName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeIPCName, ipc_name_),
  };
  ChangeIPCName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeIPCName_descriptor_,
      ChangeIPCName::default_instance_,
      ChangeIPCName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeIPCName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeIPCName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeIPCName));
  IPCObjectList_descriptor_ = file->message_type(4);
  static const int IPCObjectList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCObjectList, ipc_object_),
  };
  IPCObjectList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPCObjectList_descriptor_,
      IPCObjectList::default_instance_,
      IPCObjectList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCObjectList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCObjectList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPCObjectList));
  ModuleName_descriptor_ = file->message_type(5);
  static const int ModuleName_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleName, ipc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleName, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleName, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleName, is_exist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleName, conn_id_),
  };
  ModuleName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleName_descriptor_,
      ModuleName::default_instance_,
      ModuleName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleName));
  ModuleState_descriptor_ = file->message_type(6);
  static const int ModuleState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleState, exist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleState, rndval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleState, id_),
  };
  ModuleState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleState_descriptor_,
      ModuleState::default_instance_,
      ModuleState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleState));
  RemoveIPCObject_descriptor_ = file->message_type(7);
  static const int RemoveIPCObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveIPCObject, ipc_name_),
  };
  RemoveIPCObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveIPCObject_descriptor_,
      RemoveIPCObject::default_instance_,
      RemoveIPCObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveIPCObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveIPCObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveIPCObject));
  IPCMessage_descriptor_ = file->message_type(8);
  static const int IPCMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, message_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, ipc_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, message_),
  };
  IPCMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPCMessage_descriptor_,
      IPCMessage::default_instance_,
      IPCMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPCMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPCMessage));
  Ping_descriptor_ = file->message_type(9);
  static const int Ping_offsets_[1] = {
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ipc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPCName_descriptor_, &IPCName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddIPCObject_descriptor_, &AddIPCObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateIPCObject_descriptor_, &UpdateIPCObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeIPCName_descriptor_, &ChangeIPCName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPCObjectList_descriptor_, &IPCObjectList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleName_descriptor_, &ModuleName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleState_descriptor_, &ModuleState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveIPCObject_descriptor_, &RemoveIPCObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPCMessage_descriptor_, &IPCMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ipc_2eproto() {
  delete IPCName::default_instance_;
  delete IPCName_reflection_;
  delete AddIPCObject::default_instance_;
  delete AddIPCObject_reflection_;
  delete UpdateIPCObject::default_instance_;
  delete UpdateIPCObject_reflection_;
  delete ChangeIPCName::default_instance_;
  delete ChangeIPCName_reflection_;
  delete IPCObjectList::default_instance_;
  delete IPCObjectList_reflection_;
  delete ModuleName::default_instance_;
  delete ModuleName_reflection_;
  delete ModuleState::default_instance_;
  delete ModuleState_reflection_;
  delete RemoveIPCObject::default_instance_;
  delete RemoveIPCObject_reflection_;
  delete IPCMessage::default_instance_;
  delete IPCMessage_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
}

void protobuf_AddDesc_ipc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tipc.proto\022\003ipc\"A\n\007IPCName\022\023\n\013module_na"
    "me\030\001 \002(\t\022\021\n\thost_name\030\002 \001(\t\022\016\n\006suffix\030\003 "
    "\001(\t\"H\n\014AddIPCObject\022\036\n\010ipc_name\030\001 \002(\0132\014."
    "ipc.IPCName\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\"Y\n"
    "\017UpdateIPCObject\022\"\n\014ipc_old_name\030\001 \002(\0132\014"
    ".ipc.IPCName\022\"\n\014ipc_new_name\030\002 \002(\0132\014.ipc"
    ".IPCName\"/\n\rChangeIPCName\022\036\n\010ipc_name\030\001 "
    "\002(\0132\014.ipc.IPCName\"6\n\rIPCObjectList\022%\n\nip"
    "c_object\030\001 \003(\0132\021.ipc.AddIPCObject\"i\n\nMod"
    "uleName\022\036\n\010ipc_name\030\001 \002(\0132\014.ipc.IPCName\022"
    "\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\020\n\010is_exist\030\004 "
    "\001(\010\022\017\n\007conn_id\030\005 \001(\t\"8\n\013ModuleState\022\r\n\005e"
    "xist\030\001 \002(\010\022\016\n\006rndVal\030\002 \002(\t\022\n\n\002id\030\003 \001(\t\"#"
    "\n\017RemoveIPCObject\022\020\n\010ipc_name\030\001 \002(\t\"S\n\nI"
    "PCMessage\022\024\n\014message_name\030\001 \002(\t\022\036\n\010ipc_p"
    "ath\030\002 \003(\0132\014.ipc.IPCName\022\017\n\007message\030\003 \001(\014"
    "\"\006\n\004Ping", 648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipc.proto", &protobuf_RegisterTypes);
  IPCName::default_instance_ = new IPCName();
  AddIPCObject::default_instance_ = new AddIPCObject();
  UpdateIPCObject::default_instance_ = new UpdateIPCObject();
  ChangeIPCName::default_instance_ = new ChangeIPCName();
  IPCObjectList::default_instance_ = new IPCObjectList();
  ModuleName::default_instance_ = new ModuleName();
  ModuleState::default_instance_ = new ModuleState();
  RemoveIPCObject::default_instance_ = new RemoveIPCObject();
  IPCMessage::default_instance_ = new IPCMessage();
  Ping::default_instance_ = new Ping();
  IPCName::default_instance_->InitAsDefaultInstance();
  AddIPCObject::default_instance_->InitAsDefaultInstance();
  UpdateIPCObject::default_instance_->InitAsDefaultInstance();
  ChangeIPCName::default_instance_->InitAsDefaultInstance();
  IPCObjectList::default_instance_->InitAsDefaultInstance();
  ModuleName::default_instance_->InitAsDefaultInstance();
  ModuleState::default_instance_->InitAsDefaultInstance();
  RemoveIPCObject::default_instance_->InitAsDefaultInstance();
  IPCMessage::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ipc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ipc_2eproto {
  StaticDescriptorInitializer_ipc_2eproto() {
    protobuf_AddDesc_ipc_2eproto();
  }
} static_descriptor_initializer_ipc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IPCName::kModuleNameFieldNumber;
const int IPCName::kHostNameFieldNumber;
const int IPCName::kSuffixFieldNumber;
#endif  // !_MSC_VER

IPCName::IPCName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPCName::InitAsDefaultInstance() {
}

IPCName::IPCName(const IPCName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPCName::SharedCtor() {
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPCName::~IPCName() {
  SharedDtor();
}

void IPCName::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete suffix_;
  }
  if (this != default_instance_) {
  }
}

void IPCName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCName_descriptor_;
}

const IPCName& IPCName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

IPCName* IPCName::default_instance_ = NULL;

IPCName* IPCName::New() const {
  return new IPCName;
}

void IPCName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::kEmptyString) {
        host_name_->clear();
      }
    }
    if (has_suffix()) {
      if (suffix_ != &::google::protobuf::internal::kEmptyString) {
        suffix_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPCName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string module_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host_name;
        break;
      }

      // optional string host_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suffix;
        break;
      }

      // optional string suffix = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suffix().data(), this->suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPCName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module_name(), output);
  }

  // optional string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host_name(), output);
  }

  // optional string suffix = 3;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->suffix(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPCName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module_name(), target);
  }

  // optional string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_name(), target);
  }

  // optional string suffix = 3;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->suffix(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPCName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string module_name = 1;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // optional string host_name = 2;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // optional string suffix = 3;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPCName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPCName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPCName::MergeFrom(const IPCName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_suffix()) {
      set_suffix(from.suffix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPCName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCName::CopyFrom(const IPCName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IPCName::Swap(IPCName* other) {
  if (other != this) {
    std::swap(module_name_, other->module_name_);
    std::swap(host_name_, other->host_name_);
    std::swap(suffix_, other->suffix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPCName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCName_descriptor_;
  metadata.reflection = IPCName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddIPCObject::kIpcNameFieldNumber;
const int AddIPCObject::kIpFieldNumber;
const int AddIPCObject::kPortFieldNumber;
#endif  // !_MSC_VER

AddIPCObject::AddIPCObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddIPCObject::InitAsDefaultInstance() {
  ipc_name_ = const_cast< ::ipc::IPCName*>(&::ipc::IPCName::default_instance());
}

AddIPCObject::AddIPCObject(const AddIPCObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddIPCObject::SharedCtor() {
  _cached_size_ = 0;
  ipc_name_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddIPCObject::~AddIPCObject() {
  SharedDtor();
}

void AddIPCObject::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete ipc_name_;
  }
}

void AddIPCObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddIPCObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddIPCObject_descriptor_;
}

const AddIPCObject& AddIPCObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

AddIPCObject* AddIPCObject::default_instance_ = NULL;

AddIPCObject* AddIPCObject::New() const {
  return new AddIPCObject;
}

void AddIPCObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ipc_name()) {
      if (ipc_name_ != NULL) ipc_name_->::ipc::IPCName::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddIPCObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc.IPCName ipc_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipc_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddIPCObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ipc.IPCName ipc_name = 1;
  if (has_ipc_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ipc_name(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddIPCObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ipc.IPCName ipc_name = 1;
  if (has_ipc_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ipc_name(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddIPCObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ipc.IPCName ipc_name = 1;
    if (has_ipc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipc_name());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddIPCObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddIPCObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddIPCObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddIPCObject::MergeFrom(const AddIPCObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipc_name()) {
      mutable_ipc_name()->::ipc::IPCName::MergeFrom(from.ipc_name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddIPCObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddIPCObject::CopyFrom(const AddIPCObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddIPCObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_ipc_name()) {
    if (!this->ipc_name().IsInitialized()) return false;
  }
  return true;
}

void AddIPCObject::Swap(AddIPCObject* other) {
  if (other != this) {
    std::swap(ipc_name_, other->ipc_name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddIPCObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddIPCObject_descriptor_;
  metadata.reflection = AddIPCObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateIPCObject::kIpcOldNameFieldNumber;
const int UpdateIPCObject::kIpcNewNameFieldNumber;
#endif  // !_MSC_VER

UpdateIPCObject::UpdateIPCObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateIPCObject::InitAsDefaultInstance() {
  ipc_old_name_ = const_cast< ::ipc::IPCName*>(&::ipc::IPCName::default_instance());
  ipc_new_name_ = const_cast< ::ipc::IPCName*>(&::ipc::IPCName::default_instance());
}

UpdateIPCObject::UpdateIPCObject(const UpdateIPCObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateIPCObject::SharedCtor() {
  _cached_size_ = 0;
  ipc_old_name_ = NULL;
  ipc_new_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateIPCObject::~UpdateIPCObject() {
  SharedDtor();
}

void UpdateIPCObject::SharedDtor() {
  if (this != default_instance_) {
    delete ipc_old_name_;
    delete ipc_new_name_;
  }
}

void UpdateIPCObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateIPCObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateIPCObject_descriptor_;
}

const UpdateIPCObject& UpdateIPCObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

UpdateIPCObject* UpdateIPCObject::default_instance_ = NULL;

UpdateIPCObject* UpdateIPCObject::New() const {
  return new UpdateIPCObject;
}

void UpdateIPCObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ipc_old_name()) {
      if (ipc_old_name_ != NULL) ipc_old_name_->::ipc::IPCName::Clear();
    }
    if (has_ipc_new_name()) {
      if (ipc_new_name_ != NULL) ipc_new_name_->::ipc::IPCName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateIPCObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc.IPCName ipc_old_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipc_old_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipc_new_name;
        break;
      }

      // required .ipc.IPCName ipc_new_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipc_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipc_new_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateIPCObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ipc.IPCName ipc_old_name = 1;
  if (has_ipc_old_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ipc_old_name(), output);
  }

  // required .ipc.IPCName ipc_new_name = 2;
  if (has_ipc_new_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ipc_new_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateIPCObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ipc.IPCName ipc_old_name = 1;
  if (has_ipc_old_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ipc_old_name(), target);
  }

  // required .ipc.IPCName ipc_new_name = 2;
  if (has_ipc_new_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ipc_new_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateIPCObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ipc.IPCName ipc_old_name = 1;
    if (has_ipc_old_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipc_old_name());
    }

    // required .ipc.IPCName ipc_new_name = 2;
    if (has_ipc_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipc_new_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateIPCObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateIPCObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateIPCObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateIPCObject::MergeFrom(const UpdateIPCObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipc_old_name()) {
      mutable_ipc_old_name()->::ipc::IPCName::MergeFrom(from.ipc_old_name());
    }
    if (from.has_ipc_new_name()) {
      mutable_ipc_new_name()->::ipc::IPCName::MergeFrom(from.ipc_new_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateIPCObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateIPCObject::CopyFrom(const UpdateIPCObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateIPCObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ipc_old_name()) {
    if (!this->ipc_old_name().IsInitialized()) return false;
  }
  if (has_ipc_new_name()) {
    if (!this->ipc_new_name().IsInitialized()) return false;
  }
  return true;
}

void UpdateIPCObject::Swap(UpdateIPCObject* other) {
  if (other != this) {
    std::swap(ipc_old_name_, other->ipc_old_name_);
    std::swap(ipc_new_name_, other->ipc_new_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateIPCObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateIPCObject_descriptor_;
  metadata.reflection = UpdateIPCObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeIPCName::kIpcNameFieldNumber;
#endif  // !_MSC_VER

ChangeIPCName::ChangeIPCName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeIPCName::InitAsDefaultInstance() {
  ipc_name_ = const_cast< ::ipc::IPCName*>(&::ipc::IPCName::default_instance());
}

ChangeIPCName::ChangeIPCName(const ChangeIPCName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeIPCName::SharedCtor() {
  _cached_size_ = 0;
  ipc_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeIPCName::~ChangeIPCName() {
  SharedDtor();
}

void ChangeIPCName::SharedDtor() {
  if (this != default_instance_) {
    delete ipc_name_;
  }
}

void ChangeIPCName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeIPCName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeIPCName_descriptor_;
}

const ChangeIPCName& ChangeIPCName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

ChangeIPCName* ChangeIPCName::default_instance_ = NULL;

ChangeIPCName* ChangeIPCName::New() const {
  return new ChangeIPCName;
}

void ChangeIPCName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ipc_name()) {
      if (ipc_name_ != NULL) ipc_name_->::ipc::IPCName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeIPCName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc.IPCName ipc_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipc_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeIPCName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ipc.IPCName ipc_name = 1;
  if (has_ipc_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ipc_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeIPCName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ipc.IPCName ipc_name = 1;
  if (has_ipc_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ipc_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeIPCName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ipc.IPCName ipc_name = 1;
    if (has_ipc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipc_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeIPCName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeIPCName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeIPCName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeIPCName::MergeFrom(const ChangeIPCName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipc_name()) {
      mutable_ipc_name()->::ipc::IPCName::MergeFrom(from.ipc_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeIPCName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeIPCName::CopyFrom(const ChangeIPCName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeIPCName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ipc_name()) {
    if (!this->ipc_name().IsInitialized()) return false;
  }
  return true;
}

void ChangeIPCName::Swap(ChangeIPCName* other) {
  if (other != this) {
    std::swap(ipc_name_, other->ipc_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeIPCName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeIPCName_descriptor_;
  metadata.reflection = ChangeIPCName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPCObjectList::kIpcObjectFieldNumber;
#endif  // !_MSC_VER

IPCObjectList::IPCObjectList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPCObjectList::InitAsDefaultInstance() {
}

IPCObjectList::IPCObjectList(const IPCObjectList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPCObjectList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPCObjectList::~IPCObjectList() {
  SharedDtor();
}

void IPCObjectList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IPCObjectList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCObjectList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCObjectList_descriptor_;
}

const IPCObjectList& IPCObjectList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

IPCObjectList* IPCObjectList::default_instance_ = NULL;

IPCObjectList* IPCObjectList::New() const {
  return new IPCObjectList;
}

void IPCObjectList::Clear() {
  ipc_object_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPCObjectList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ipc.AddIPCObject ipc_object = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipc_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipc_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ipc_object;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPCObjectList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ipc.AddIPCObject ipc_object = 1;
  for (int i = 0; i < this->ipc_object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ipc_object(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPCObjectList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ipc.AddIPCObject ipc_object = 1;
  for (int i = 0; i < this->ipc_object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ipc_object(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPCObjectList::ByteSize() const {
  int total_size = 0;

  // repeated .ipc.AddIPCObject ipc_object = 1;
  total_size += 1 * this->ipc_object_size();
  for (int i = 0; i < this->ipc_object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipc_object(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCObjectList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPCObjectList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPCObjectList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPCObjectList::MergeFrom(const IPCObjectList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipc_object_.MergeFrom(from.ipc_object_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPCObjectList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCObjectList::CopyFrom(const IPCObjectList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCObjectList::IsInitialized() const {

  for (int i = 0; i < ipc_object_size(); i++) {
    if (!this->ipc_object(i).IsInitialized()) return false;
  }
  return true;
}

void IPCObjectList::Swap(IPCObjectList* other) {
  if (other != this) {
    ipc_object_.Swap(&other->ipc_object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPCObjectList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCObjectList_descriptor_;
  metadata.reflection = IPCObjectList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleName::kIpcNameFieldNumber;
const int ModuleName::kIpFieldNumber;
const int ModuleName::kPortFieldNumber;
const int ModuleName::kIsExistFieldNumber;
const int ModuleName::kConnIdFieldNumber;
#endif  // !_MSC_VER

ModuleName::ModuleName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleName::InitAsDefaultInstance() {
  ipc_name_ = const_cast< ::ipc::IPCName*>(&::ipc::IPCName::default_instance());
}

ModuleName::ModuleName(const ModuleName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleName::SharedCtor() {
  _cached_size_ = 0;
  ipc_name_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  is_exist_ = false;
  conn_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleName::~ModuleName() {
  SharedDtor();
}

void ModuleName::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (conn_id_ != &::google::protobuf::internal::kEmptyString) {
    delete conn_id_;
  }
  if (this != default_instance_) {
    delete ipc_name_;
  }
}

void ModuleName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleName_descriptor_;
}

const ModuleName& ModuleName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

ModuleName* ModuleName::default_instance_ = NULL;

ModuleName* ModuleName::New() const {
  return new ModuleName;
}

void ModuleName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ipc_name()) {
      if (ipc_name_ != NULL) ipc_name_->::ipc::IPCName::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    is_exist_ = false;
    if (has_conn_id()) {
      if (conn_id_ != &::google::protobuf::internal::kEmptyString) {
        conn_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ipc.IPCName ipc_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipc_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_exist;
        break;
      }

      // optional bool is_exist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_exist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exist_)));
          set_has_is_exist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_conn_id;
        break;
      }

      // optional string conn_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conn_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conn_id().data(), this->conn_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ipc.IPCName ipc_name = 1;
  if (has_ipc_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ipc_name(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional bool is_exist = 4;
  if (has_is_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_exist(), output);
  }

  // optional string conn_id = 5;
  if (has_conn_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conn_id().data(), this->conn_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->conn_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ipc.IPCName ipc_name = 1;
  if (has_ipc_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ipc_name(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional bool is_exist = 4;
  if (has_is_exist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_exist(), target);
  }

  // optional string conn_id = 5;
  if (has_conn_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conn_id().data(), this->conn_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->conn_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ipc.IPCName ipc_name = 1;
    if (has_ipc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ipc_name());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool is_exist = 4;
    if (has_is_exist()) {
      total_size += 1 + 1;
    }

    // optional string conn_id = 5;
    if (has_conn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conn_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleName::MergeFrom(const ModuleName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipc_name()) {
      mutable_ipc_name()->::ipc::IPCName::MergeFrom(from.ipc_name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_is_exist()) {
      set_is_exist(from.is_exist());
    }
    if (from.has_conn_id()) {
      set_conn_id(from.conn_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleName::CopyFrom(const ModuleName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ipc_name()) {
    if (!this->ipc_name().IsInitialized()) return false;
  }
  return true;
}

void ModuleName::Swap(ModuleName* other) {
  if (other != this) {
    std::swap(ipc_name_, other->ipc_name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(is_exist_, other->is_exist_);
    std::swap(conn_id_, other->conn_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleName_descriptor_;
  metadata.reflection = ModuleName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleState::kExistFieldNumber;
const int ModuleState::kRndValFieldNumber;
const int ModuleState::kIdFieldNumber;
#endif  // !_MSC_VER

ModuleState::ModuleState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModuleState::InitAsDefaultInstance() {
}

ModuleState::ModuleState(const ModuleState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleState::SharedCtor() {
  _cached_size_ = 0;
  exist_ = false;
  rndval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleState::~ModuleState() {
  SharedDtor();
}

void ModuleState::SharedDtor() {
  if (rndval_ != &::google::protobuf::internal::kEmptyString) {
    delete rndval_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ModuleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleState_descriptor_;
}

const ModuleState& ModuleState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

ModuleState* ModuleState::default_instance_ = NULL;

ModuleState* ModuleState::New() const {
  return new ModuleState;
}

void ModuleState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exist_ = false;
    if (has_rndval()) {
      if (rndval_ != &::google::protobuf::internal::kEmptyString) {
        rndval_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool exist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exist_)));
          set_has_exist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rndVal;
        break;
      }

      // required string rndVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rndVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rndval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rndval().data(), this->rndval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool exist = 1;
  if (has_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->exist(), output);
  }

  // required string rndVal = 2;
  if (has_rndval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rndval().data(), this->rndval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rndval(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModuleState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool exist = 1;
  if (has_exist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->exist(), target);
  }

  // required string rndVal = 2;
  if (has_rndval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rndval().data(), this->rndval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rndval(), target);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModuleState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool exist = 1;
    if (has_exist()) {
      total_size += 1 + 1;
    }

    // required string rndVal = 2;
    if (has_rndval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rndval());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleState::MergeFrom(const ModuleState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exist()) {
      set_exist(from.exist());
    }
    if (from.has_rndval()) {
      set_rndval(from.rndval());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleState::CopyFrom(const ModuleState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModuleState::Swap(ModuleState* other) {
  if (other != this) {
    std::swap(exist_, other->exist_);
    std::swap(rndval_, other->rndval_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleState_descriptor_;
  metadata.reflection = ModuleState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveIPCObject::kIpcNameFieldNumber;
#endif  // !_MSC_VER

RemoveIPCObject::RemoveIPCObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveIPCObject::InitAsDefaultInstance() {
}

RemoveIPCObject::RemoveIPCObject(const RemoveIPCObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveIPCObject::SharedCtor() {
  _cached_size_ = 0;
  ipc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveIPCObject::~RemoveIPCObject() {
  SharedDtor();
}

void RemoveIPCObject::SharedDtor() {
  if (ipc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ipc_name_;
  }
  if (this != default_instance_) {
  }
}

void RemoveIPCObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveIPCObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveIPCObject_descriptor_;
}

const RemoveIPCObject& RemoveIPCObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

RemoveIPCObject* RemoveIPCObject::default_instance_ = NULL;

RemoveIPCObject* RemoveIPCObject::New() const {
  return new RemoveIPCObject;
}

void RemoveIPCObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ipc_name()) {
      if (ipc_name_ != &::google::protobuf::internal::kEmptyString) {
        ipc_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveIPCObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ipc_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipc_name().data(), this->ipc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveIPCObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ipc_name = 1;
  if (has_ipc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipc_name().data(), this->ipc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ipc_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveIPCObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ipc_name = 1;
  if (has_ipc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipc_name().data(), this->ipc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipc_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveIPCObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ipc_name = 1;
    if (has_ipc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipc_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveIPCObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveIPCObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveIPCObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveIPCObject::MergeFrom(const RemoveIPCObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipc_name()) {
      set_ipc_name(from.ipc_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveIPCObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveIPCObject::CopyFrom(const RemoveIPCObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveIPCObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveIPCObject::Swap(RemoveIPCObject* other) {
  if (other != this) {
    std::swap(ipc_name_, other->ipc_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveIPCObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveIPCObject_descriptor_;
  metadata.reflection = RemoveIPCObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IPCMessage::kMessageNameFieldNumber;
const int IPCMessage::kIpcPathFieldNumber;
const int IPCMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

IPCMessage::IPCMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPCMessage::InitAsDefaultInstance() {
}

IPCMessage::IPCMessage(const IPCMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPCMessage::SharedCtor() {
  _cached_size_ = 0;
  message_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPCMessage::~IPCMessage() {
  SharedDtor();
}

void IPCMessage::SharedDtor() {
  if (message_name_ != &::google::protobuf::internal::kEmptyString) {
    delete message_name_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void IPCMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPCMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPCMessage_descriptor_;
}

const IPCMessage& IPCMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

IPCMessage* IPCMessage::default_instance_ = NULL;

IPCMessage* IPCMessage::New() const {
  return new IPCMessage;
}

void IPCMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_name()) {
      if (message_name_ != &::google::protobuf::internal::kEmptyString) {
        message_name_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ipc_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPCMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message_name().data(), this->message_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipc_path;
        break;
      }

      // repeated .ipc.IPCName ipc_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipc_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ipc_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ipc_path;
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPCMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message_name = 1;
  if (has_message_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_name().data(), this->message_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_name(), output);
  }

  // repeated .ipc.IPCName ipc_path = 2;
  for (int i = 0; i < this->ipc_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ipc_path(i), output);
  }

  // optional bytes message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPCMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message_name = 1;
  if (has_message_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message_name().data(), this->message_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_name(), target);
  }

  // repeated .ipc.IPCName ipc_path = 2;
  for (int i = 0; i < this->ipc_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ipc_path(i), target);
  }

  // optional bytes message = 3;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPCMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message_name = 1;
    if (has_message_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_name());
    }

    // optional bytes message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  // repeated .ipc.IPCName ipc_path = 2;
  total_size += 1 * this->ipc_path_size();
  for (int i = 0; i < this->ipc_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ipc_path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPCMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPCMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPCMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPCMessage::MergeFrom(const IPCMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  ipc_path_.MergeFrom(from.ipc_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_name()) {
      set_message_name(from.message_name());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPCMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCMessage::CopyFrom(const IPCMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ipc_path_size(); i++) {
    if (!this->ipc_path(i).IsInitialized()) return false;
  }
  return true;
}

void IPCMessage::Swap(IPCMessage* other) {
  if (other != this) {
    std::swap(message_name_, other->message_name_);
    ipc_path_.Swap(&other->ipc_path_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPCMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPCMessage_descriptor_;
  metadata.reflection = IPCMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  SharedDtor();
}

void Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc

// @@protoc_insertion_point(global_scope)
