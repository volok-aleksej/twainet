// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto

#ifndef PROTOBUF_ipc_2eproto__INCLUDED
#define PROTOBUF_ipc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ipc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ipc_2eproto();
void protobuf_AssignDesc_ipc_2eproto();
void protobuf_ShutdownFile_ipc_2eproto();

class IPCName;
class AddIPCObject;
class UpdateIPCObject;
class ChangeIPCName;
class IPCObjectList;
class ModuleName;
class ModuleState;
class RemoveIPCObject;
class IPCMessage;
class Ping;

// ===================================================================

class IPCName : public ::google::protobuf::Message {
 public:
  IPCName();
  virtual ~IPCName();

  IPCName(const IPCName& from);

  inline IPCName& operator=(const IPCName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCName& default_instance();

  void Swap(IPCName* other);

  // implements Message ----------------------------------------------

  IPCName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCName& from);
  void MergeFrom(const IPCName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string module_name = 1;
  inline bool has_module_name() const;
  inline void clear_module_name();
  static const int kModuleNameFieldNumber = 1;
  inline const ::std::string& module_name() const;
  inline void set_module_name(const ::std::string& value);
  inline void set_module_name(const char* value);
  inline void set_module_name(const char* value, size_t size);
  inline ::std::string* mutable_module_name();
  inline ::std::string* release_module_name();
  inline void set_allocated_module_name(::std::string* module_name);

  // optional string host_name = 2;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 2;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const char* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  inline void set_allocated_host_name(::std::string* host_name);

  // optional string suffix = 3;
  inline bool has_suffix() const;
  inline void clear_suffix();
  static const int kSuffixFieldNumber = 3;
  inline const ::std::string& suffix() const;
  inline void set_suffix(const ::std::string& value);
  inline void set_suffix(const char* value);
  inline void set_suffix(const char* value, size_t size);
  inline ::std::string* mutable_suffix();
  inline ::std::string* release_suffix();
  inline void set_allocated_suffix(::std::string* suffix);

  // @@protoc_insertion_point(class_scope:ipc.IPCName)
 private:
  inline void set_has_module_name();
  inline void clear_has_module_name();
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_suffix();
  inline void clear_has_suffix();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* module_name_;
  ::std::string* host_name_;
  ::std::string* suffix_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static IPCName* default_instance_;
};
// -------------------------------------------------------------------

class AddIPCObject : public ::google::protobuf::Message {
 public:
  AddIPCObject();
  virtual ~AddIPCObject();

  AddIPCObject(const AddIPCObject& from);

  inline AddIPCObject& operator=(const AddIPCObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddIPCObject& default_instance();

  void Swap(AddIPCObject* other);

  // implements Message ----------------------------------------------

  AddIPCObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddIPCObject& from);
  void MergeFrom(const AddIPCObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc.IPCName ipc_name = 1;
  inline bool has_ipc_name() const;
  inline void clear_ipc_name();
  static const int kIpcNameFieldNumber = 1;
  inline const ::ipc::IPCName& ipc_name() const;
  inline ::ipc::IPCName* mutable_ipc_name();
  inline ::ipc::IPCName* release_ipc_name();
  inline void set_allocated_ipc_name(::ipc::IPCName* ipc_name);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ipc.AddIPCObject)
 private:
  inline void set_has_ipc_name();
  inline void clear_has_ipc_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ipc::IPCName* ipc_name_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static AddIPCObject* default_instance_;
};
// -------------------------------------------------------------------

class UpdateIPCObject : public ::google::protobuf::Message {
 public:
  UpdateIPCObject();
  virtual ~UpdateIPCObject();

  UpdateIPCObject(const UpdateIPCObject& from);

  inline UpdateIPCObject& operator=(const UpdateIPCObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateIPCObject& default_instance();

  void Swap(UpdateIPCObject* other);

  // implements Message ----------------------------------------------

  UpdateIPCObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateIPCObject& from);
  void MergeFrom(const UpdateIPCObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc.IPCName ipc_old_name = 1;
  inline bool has_ipc_old_name() const;
  inline void clear_ipc_old_name();
  static const int kIpcOldNameFieldNumber = 1;
  inline const ::ipc::IPCName& ipc_old_name() const;
  inline ::ipc::IPCName* mutable_ipc_old_name();
  inline ::ipc::IPCName* release_ipc_old_name();
  inline void set_allocated_ipc_old_name(::ipc::IPCName* ipc_old_name);

  // required .ipc.IPCName ipc_new_name = 2;
  inline bool has_ipc_new_name() const;
  inline void clear_ipc_new_name();
  static const int kIpcNewNameFieldNumber = 2;
  inline const ::ipc::IPCName& ipc_new_name() const;
  inline ::ipc::IPCName* mutable_ipc_new_name();
  inline ::ipc::IPCName* release_ipc_new_name();
  inline void set_allocated_ipc_new_name(::ipc::IPCName* ipc_new_name);

  // @@protoc_insertion_point(class_scope:ipc.UpdateIPCObject)
 private:
  inline void set_has_ipc_old_name();
  inline void clear_has_ipc_old_name();
  inline void set_has_ipc_new_name();
  inline void clear_has_ipc_new_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ipc::IPCName* ipc_old_name_;
  ::ipc::IPCName* ipc_new_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static UpdateIPCObject* default_instance_;
};
// -------------------------------------------------------------------

class ChangeIPCName : public ::google::protobuf::Message {
 public:
  ChangeIPCName();
  virtual ~ChangeIPCName();

  ChangeIPCName(const ChangeIPCName& from);

  inline ChangeIPCName& operator=(const ChangeIPCName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeIPCName& default_instance();

  void Swap(ChangeIPCName* other);

  // implements Message ----------------------------------------------

  ChangeIPCName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeIPCName& from);
  void MergeFrom(const ChangeIPCName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc.IPCName ipc_name = 1;
  inline bool has_ipc_name() const;
  inline void clear_ipc_name();
  static const int kIpcNameFieldNumber = 1;
  inline const ::ipc::IPCName& ipc_name() const;
  inline ::ipc::IPCName* mutable_ipc_name();
  inline ::ipc::IPCName* release_ipc_name();
  inline void set_allocated_ipc_name(::ipc::IPCName* ipc_name);

  // @@protoc_insertion_point(class_scope:ipc.ChangeIPCName)
 private:
  inline void set_has_ipc_name();
  inline void clear_has_ipc_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ipc::IPCName* ipc_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static ChangeIPCName* default_instance_;
};
// -------------------------------------------------------------------

class IPCObjectList : public ::google::protobuf::Message {
 public:
  IPCObjectList();
  virtual ~IPCObjectList();

  IPCObjectList(const IPCObjectList& from);

  inline IPCObjectList& operator=(const IPCObjectList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCObjectList& default_instance();

  void Swap(IPCObjectList* other);

  // implements Message ----------------------------------------------

  IPCObjectList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCObjectList& from);
  void MergeFrom(const IPCObjectList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ipc.AddIPCObject ipc_object = 1;
  inline int ipc_object_size() const;
  inline void clear_ipc_object();
  static const int kIpcObjectFieldNumber = 1;
  inline const ::ipc::AddIPCObject& ipc_object(int index) const;
  inline ::ipc::AddIPCObject* mutable_ipc_object(int index);
  inline ::ipc::AddIPCObject* add_ipc_object();
  inline const ::google::protobuf::RepeatedPtrField< ::ipc::AddIPCObject >&
      ipc_object() const;
  inline ::google::protobuf::RepeatedPtrField< ::ipc::AddIPCObject >*
      mutable_ipc_object();

  // @@protoc_insertion_point(class_scope:ipc.IPCObjectList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ipc::AddIPCObject > ipc_object_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static IPCObjectList* default_instance_;
};
// -------------------------------------------------------------------

class ModuleName : public ::google::protobuf::Message {
 public:
  ModuleName();
  virtual ~ModuleName();

  ModuleName(const ModuleName& from);

  inline ModuleName& operator=(const ModuleName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleName& default_instance();

  void Swap(ModuleName* other);

  // implements Message ----------------------------------------------

  ModuleName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModuleName& from);
  void MergeFrom(const ModuleName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ipc.IPCName ipc_name = 1;
  inline bool has_ipc_name() const;
  inline void clear_ipc_name();
  static const int kIpcNameFieldNumber = 1;
  inline const ::ipc::IPCName& ipc_name() const;
  inline ::ipc::IPCName* mutable_ipc_name();
  inline ::ipc::IPCName* release_ipc_name();
  inline void set_allocated_ipc_name(::ipc::IPCName* ipc_name);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional bool is_exist = 4;
  inline bool has_is_exist() const;
  inline void clear_is_exist();
  static const int kIsExistFieldNumber = 4;
  inline bool is_exist() const;
  inline void set_is_exist(bool value);

  // optional string conn_id = 5;
  inline bool has_conn_id() const;
  inline void clear_conn_id();
  static const int kConnIdFieldNumber = 5;
  inline const ::std::string& conn_id() const;
  inline void set_conn_id(const ::std::string& value);
  inline void set_conn_id(const char* value);
  inline void set_conn_id(const char* value, size_t size);
  inline ::std::string* mutable_conn_id();
  inline ::std::string* release_conn_id();
  inline void set_allocated_conn_id(::std::string* conn_id);

  // @@protoc_insertion_point(class_scope:ipc.ModuleName)
 private:
  inline void set_has_ipc_name();
  inline void clear_has_ipc_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_is_exist();
  inline void clear_has_is_exist();
  inline void set_has_conn_id();
  inline void clear_has_conn_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ipc::IPCName* ipc_name_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  bool is_exist_;
  ::std::string* conn_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static ModuleName* default_instance_;
};
// -------------------------------------------------------------------

class ModuleState : public ::google::protobuf::Message {
 public:
  ModuleState();
  virtual ~ModuleState();

  ModuleState(const ModuleState& from);

  inline ModuleState& operator=(const ModuleState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleState& default_instance();

  void Swap(ModuleState* other);

  // implements Message ----------------------------------------------

  ModuleState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModuleState& from);
  void MergeFrom(const ModuleState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool exist = 1;
  inline bool has_exist() const;
  inline void clear_exist();
  static const int kExistFieldNumber = 1;
  inline bool exist() const;
  inline void set_exist(bool value);

  // required string rndVal = 2;
  inline bool has_rndval() const;
  inline void clear_rndval();
  static const int kRndValFieldNumber = 2;
  inline const ::std::string& rndval() const;
  inline void set_rndval(const ::std::string& value);
  inline void set_rndval(const char* value);
  inline void set_rndval(const char* value, size_t size);
  inline ::std::string* mutable_rndval();
  inline ::std::string* release_rndval();
  inline void set_allocated_rndval(::std::string* rndval);

  // optional string id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:ipc.ModuleState)
 private:
  inline void set_has_exist();
  inline void clear_has_exist();
  inline void set_has_rndval();
  inline void clear_has_rndval();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rndval_;
  ::std::string* id_;
  bool exist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static ModuleState* default_instance_;
};
// -------------------------------------------------------------------

class RemoveIPCObject : public ::google::protobuf::Message {
 public:
  RemoveIPCObject();
  virtual ~RemoveIPCObject();

  RemoveIPCObject(const RemoveIPCObject& from);

  inline RemoveIPCObject& operator=(const RemoveIPCObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveIPCObject& default_instance();

  void Swap(RemoveIPCObject* other);

  // implements Message ----------------------------------------------

  RemoveIPCObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveIPCObject& from);
  void MergeFrom(const RemoveIPCObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ipc_name = 1;
  inline bool has_ipc_name() const;
  inline void clear_ipc_name();
  static const int kIpcNameFieldNumber = 1;
  inline const ::std::string& ipc_name() const;
  inline void set_ipc_name(const ::std::string& value);
  inline void set_ipc_name(const char* value);
  inline void set_ipc_name(const char* value, size_t size);
  inline ::std::string* mutable_ipc_name();
  inline ::std::string* release_ipc_name();
  inline void set_allocated_ipc_name(::std::string* ipc_name);

  // @@protoc_insertion_point(class_scope:ipc.RemoveIPCObject)
 private:
  inline void set_has_ipc_name();
  inline void clear_has_ipc_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ipc_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static RemoveIPCObject* default_instance_;
};
// -------------------------------------------------------------------

class IPCMessage : public ::google::protobuf::Message {
 public:
  IPCMessage();
  virtual ~IPCMessage();

  IPCMessage(const IPCMessage& from);

  inline IPCMessage& operator=(const IPCMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IPCMessage& default_instance();

  void Swap(IPCMessage* other);

  // implements Message ----------------------------------------------

  IPCMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPCMessage& from);
  void MergeFrom(const IPCMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message_name = 1;
  inline bool has_message_name() const;
  inline void clear_message_name();
  static const int kMessageNameFieldNumber = 1;
  inline const ::std::string& message_name() const;
  inline void set_message_name(const ::std::string& value);
  inline void set_message_name(const char* value);
  inline void set_message_name(const char* value, size_t size);
  inline ::std::string* mutable_message_name();
  inline ::std::string* release_message_name();
  inline void set_allocated_message_name(::std::string* message_name);

  // repeated .ipc.IPCName ipc_path = 2;
  inline int ipc_path_size() const;
  inline void clear_ipc_path();
  static const int kIpcPathFieldNumber = 2;
  inline const ::ipc::IPCName& ipc_path(int index) const;
  inline ::ipc::IPCName* mutable_ipc_path(int index);
  inline ::ipc::IPCName* add_ipc_path();
  inline const ::google::protobuf::RepeatedPtrField< ::ipc::IPCName >&
      ipc_path() const;
  inline ::google::protobuf::RepeatedPtrField< ::ipc::IPCName >*
      mutable_ipc_path();

  // optional bytes message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:ipc.IPCMessage)
 private:
  inline void set_has_message_name();
  inline void clear_has_message_name();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_name_;
  ::google::protobuf::RepeatedPtrField< ::ipc::IPCName > ipc_path_;
  ::std::string* message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static IPCMessage* default_instance_;
};
// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipc.Ping)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ipc_2eproto();
  friend void protobuf_AssignDesc_ipc_2eproto();
  friend void protobuf_ShutdownFile_ipc_2eproto();

  void InitAsDefaultInstance();
  static Ping* default_instance_;
};
// ===================================================================


// ===================================================================

// IPCName

// required string module_name = 1;
inline bool IPCName::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPCName::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPCName::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPCName::clear_module_name() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    module_name_->clear();
  }
  clear_has_module_name();
}
inline const ::std::string& IPCName::module_name() const {
  return *module_name_;
}
inline void IPCName::set_module_name(const ::std::string& value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void IPCName::set_module_name(const char* value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void IPCName::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCName::mutable_module_name() {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  return module_name_;
}
inline ::std::string* IPCName::release_module_name() {
  clear_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_name_;
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IPCName::set_allocated_module_name(::std::string* module_name) {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (module_name) {
    set_has_module_name();
    module_name_ = module_name;
  } else {
    clear_has_module_name();
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string host_name = 2;
inline bool IPCName::has_host_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPCName::set_has_host_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPCName::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPCName::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& IPCName::host_name() const {
  return *host_name_;
}
inline void IPCName::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
}
inline void IPCName::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
}
inline void IPCName::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCName::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  return host_name_;
}
inline ::std::string* IPCName::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IPCName::set_allocated_host_name(::std::string* host_name) {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  if (host_name) {
    set_has_host_name();
    host_name_ = host_name;
  } else {
    clear_has_host_name();
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string suffix = 3;
inline bool IPCName::has_suffix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IPCName::set_has_suffix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IPCName::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IPCName::clear_suffix() {
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    suffix_->clear();
  }
  clear_has_suffix();
}
inline const ::std::string& IPCName::suffix() const {
  return *suffix_;
}
inline void IPCName::set_suffix(const ::std::string& value) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(value);
}
inline void IPCName::set_suffix(const char* value) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(value);
}
inline void IPCName::set_suffix(const char* value, size_t size) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCName::mutable_suffix() {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  return suffix_;
}
inline ::std::string* IPCName::release_suffix() {
  clear_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = suffix_;
    suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IPCName::set_allocated_suffix(::std::string* suffix) {
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete suffix_;
  }
  if (suffix) {
    set_has_suffix();
    suffix_ = suffix;
  } else {
    clear_has_suffix();
    suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AddIPCObject

// required .ipc.IPCName ipc_name = 1;
inline bool AddIPCObject::has_ipc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddIPCObject::set_has_ipc_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddIPCObject::clear_has_ipc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddIPCObject::clear_ipc_name() {
  if (ipc_name_ != NULL) ipc_name_->::ipc::IPCName::Clear();
  clear_has_ipc_name();
}
inline const ::ipc::IPCName& AddIPCObject::ipc_name() const {
  return ipc_name_ != NULL ? *ipc_name_ : *default_instance_->ipc_name_;
}
inline ::ipc::IPCName* AddIPCObject::mutable_ipc_name() {
  set_has_ipc_name();
  if (ipc_name_ == NULL) ipc_name_ = new ::ipc::IPCName;
  return ipc_name_;
}
inline ::ipc::IPCName* AddIPCObject::release_ipc_name() {
  clear_has_ipc_name();
  ::ipc::IPCName* temp = ipc_name_;
  ipc_name_ = NULL;
  return temp;
}
inline void AddIPCObject::set_allocated_ipc_name(::ipc::IPCName* ipc_name) {
  delete ipc_name_;
  ipc_name_ = ipc_name;
  if (ipc_name) {
    set_has_ipc_name();
  } else {
    clear_has_ipc_name();
  }
}

// required string ip = 2;
inline bool AddIPCObject::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddIPCObject::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddIPCObject::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddIPCObject::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AddIPCObject::ip() const {
  return *ip_;
}
inline void AddIPCObject::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AddIPCObject::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AddIPCObject::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddIPCObject::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* AddIPCObject::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddIPCObject::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool AddIPCObject::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddIPCObject::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddIPCObject::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddIPCObject::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 AddIPCObject::port() const {
  return port_;
}
inline void AddIPCObject::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// UpdateIPCObject

// required .ipc.IPCName ipc_old_name = 1;
inline bool UpdateIPCObject::has_ipc_old_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateIPCObject::set_has_ipc_old_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateIPCObject::clear_has_ipc_old_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateIPCObject::clear_ipc_old_name() {
  if (ipc_old_name_ != NULL) ipc_old_name_->::ipc::IPCName::Clear();
  clear_has_ipc_old_name();
}
inline const ::ipc::IPCName& UpdateIPCObject::ipc_old_name() const {
  return ipc_old_name_ != NULL ? *ipc_old_name_ : *default_instance_->ipc_old_name_;
}
inline ::ipc::IPCName* UpdateIPCObject::mutable_ipc_old_name() {
  set_has_ipc_old_name();
  if (ipc_old_name_ == NULL) ipc_old_name_ = new ::ipc::IPCName;
  return ipc_old_name_;
}
inline ::ipc::IPCName* UpdateIPCObject::release_ipc_old_name() {
  clear_has_ipc_old_name();
  ::ipc::IPCName* temp = ipc_old_name_;
  ipc_old_name_ = NULL;
  return temp;
}
inline void UpdateIPCObject::set_allocated_ipc_old_name(::ipc::IPCName* ipc_old_name) {
  delete ipc_old_name_;
  ipc_old_name_ = ipc_old_name;
  if (ipc_old_name) {
    set_has_ipc_old_name();
  } else {
    clear_has_ipc_old_name();
  }
}

// required .ipc.IPCName ipc_new_name = 2;
inline bool UpdateIPCObject::has_ipc_new_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateIPCObject::set_has_ipc_new_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateIPCObject::clear_has_ipc_new_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateIPCObject::clear_ipc_new_name() {
  if (ipc_new_name_ != NULL) ipc_new_name_->::ipc::IPCName::Clear();
  clear_has_ipc_new_name();
}
inline const ::ipc::IPCName& UpdateIPCObject::ipc_new_name() const {
  return ipc_new_name_ != NULL ? *ipc_new_name_ : *default_instance_->ipc_new_name_;
}
inline ::ipc::IPCName* UpdateIPCObject::mutable_ipc_new_name() {
  set_has_ipc_new_name();
  if (ipc_new_name_ == NULL) ipc_new_name_ = new ::ipc::IPCName;
  return ipc_new_name_;
}
inline ::ipc::IPCName* UpdateIPCObject::release_ipc_new_name() {
  clear_has_ipc_new_name();
  ::ipc::IPCName* temp = ipc_new_name_;
  ipc_new_name_ = NULL;
  return temp;
}
inline void UpdateIPCObject::set_allocated_ipc_new_name(::ipc::IPCName* ipc_new_name) {
  delete ipc_new_name_;
  ipc_new_name_ = ipc_new_name;
  if (ipc_new_name) {
    set_has_ipc_new_name();
  } else {
    clear_has_ipc_new_name();
  }
}

// -------------------------------------------------------------------

// ChangeIPCName

// required .ipc.IPCName ipc_name = 1;
inline bool ChangeIPCName::has_ipc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeIPCName::set_has_ipc_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeIPCName::clear_has_ipc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeIPCName::clear_ipc_name() {
  if (ipc_name_ != NULL) ipc_name_->::ipc::IPCName::Clear();
  clear_has_ipc_name();
}
inline const ::ipc::IPCName& ChangeIPCName::ipc_name() const {
  return ipc_name_ != NULL ? *ipc_name_ : *default_instance_->ipc_name_;
}
inline ::ipc::IPCName* ChangeIPCName::mutable_ipc_name() {
  set_has_ipc_name();
  if (ipc_name_ == NULL) ipc_name_ = new ::ipc::IPCName;
  return ipc_name_;
}
inline ::ipc::IPCName* ChangeIPCName::release_ipc_name() {
  clear_has_ipc_name();
  ::ipc::IPCName* temp = ipc_name_;
  ipc_name_ = NULL;
  return temp;
}
inline void ChangeIPCName::set_allocated_ipc_name(::ipc::IPCName* ipc_name) {
  delete ipc_name_;
  ipc_name_ = ipc_name;
  if (ipc_name) {
    set_has_ipc_name();
  } else {
    clear_has_ipc_name();
  }
}

// -------------------------------------------------------------------

// IPCObjectList

// repeated .ipc.AddIPCObject ipc_object = 1;
inline int IPCObjectList::ipc_object_size() const {
  return ipc_object_.size();
}
inline void IPCObjectList::clear_ipc_object() {
  ipc_object_.Clear();
}
inline const ::ipc::AddIPCObject& IPCObjectList::ipc_object(int index) const {
  return ipc_object_.Get(index);
}
inline ::ipc::AddIPCObject* IPCObjectList::mutable_ipc_object(int index) {
  return ipc_object_.Mutable(index);
}
inline ::ipc::AddIPCObject* IPCObjectList::add_ipc_object() {
  return ipc_object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ipc::AddIPCObject >&
IPCObjectList::ipc_object() const {
  return ipc_object_;
}
inline ::google::protobuf::RepeatedPtrField< ::ipc::AddIPCObject >*
IPCObjectList::mutable_ipc_object() {
  return &ipc_object_;
}

// -------------------------------------------------------------------

// ModuleName

// required .ipc.IPCName ipc_name = 1;
inline bool ModuleName::has_ipc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleName::set_has_ipc_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleName::clear_has_ipc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleName::clear_ipc_name() {
  if (ipc_name_ != NULL) ipc_name_->::ipc::IPCName::Clear();
  clear_has_ipc_name();
}
inline const ::ipc::IPCName& ModuleName::ipc_name() const {
  return ipc_name_ != NULL ? *ipc_name_ : *default_instance_->ipc_name_;
}
inline ::ipc::IPCName* ModuleName::mutable_ipc_name() {
  set_has_ipc_name();
  if (ipc_name_ == NULL) ipc_name_ = new ::ipc::IPCName;
  return ipc_name_;
}
inline ::ipc::IPCName* ModuleName::release_ipc_name() {
  clear_has_ipc_name();
  ::ipc::IPCName* temp = ipc_name_;
  ipc_name_ = NULL;
  return temp;
}
inline void ModuleName::set_allocated_ipc_name(::ipc::IPCName* ipc_name) {
  delete ipc_name_;
  ipc_name_ = ipc_name;
  if (ipc_name) {
    set_has_ipc_name();
  } else {
    clear_has_ipc_name();
  }
}

// optional string ip = 2;
inline bool ModuleName::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleName::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleName::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleName::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ModuleName::ip() const {
  return *ip_;
}
inline void ModuleName::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ModuleName::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ModuleName::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModuleName::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ModuleName::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModuleName::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 3;
inline bool ModuleName::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModuleName::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModuleName::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModuleName::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ModuleName::port() const {
  return port_;
}
inline void ModuleName::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional bool is_exist = 4;
inline bool ModuleName::has_is_exist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModuleName::set_has_is_exist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModuleName::clear_has_is_exist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModuleName::clear_is_exist() {
  is_exist_ = false;
  clear_has_is_exist();
}
inline bool ModuleName::is_exist() const {
  return is_exist_;
}
inline void ModuleName::set_is_exist(bool value) {
  set_has_is_exist();
  is_exist_ = value;
}

// optional string conn_id = 5;
inline bool ModuleName::has_conn_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModuleName::set_has_conn_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModuleName::clear_has_conn_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModuleName::clear_conn_id() {
  if (conn_id_ != &::google::protobuf::internal::kEmptyString) {
    conn_id_->clear();
  }
  clear_has_conn_id();
}
inline const ::std::string& ModuleName::conn_id() const {
  return *conn_id_;
}
inline void ModuleName::set_conn_id(const ::std::string& value) {
  set_has_conn_id();
  if (conn_id_ == &::google::protobuf::internal::kEmptyString) {
    conn_id_ = new ::std::string;
  }
  conn_id_->assign(value);
}
inline void ModuleName::set_conn_id(const char* value) {
  set_has_conn_id();
  if (conn_id_ == &::google::protobuf::internal::kEmptyString) {
    conn_id_ = new ::std::string;
  }
  conn_id_->assign(value);
}
inline void ModuleName::set_conn_id(const char* value, size_t size) {
  set_has_conn_id();
  if (conn_id_ == &::google::protobuf::internal::kEmptyString) {
    conn_id_ = new ::std::string;
  }
  conn_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModuleName::mutable_conn_id() {
  set_has_conn_id();
  if (conn_id_ == &::google::protobuf::internal::kEmptyString) {
    conn_id_ = new ::std::string;
  }
  return conn_id_;
}
inline ::std::string* ModuleName::release_conn_id() {
  clear_has_conn_id();
  if (conn_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = conn_id_;
    conn_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModuleName::set_allocated_conn_id(::std::string* conn_id) {
  if (conn_id_ != &::google::protobuf::internal::kEmptyString) {
    delete conn_id_;
  }
  if (conn_id) {
    set_has_conn_id();
    conn_id_ = conn_id;
  } else {
    clear_has_conn_id();
    conn_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ModuleState

// required bool exist = 1;
inline bool ModuleState::has_exist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleState::set_has_exist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleState::clear_has_exist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleState::clear_exist() {
  exist_ = false;
  clear_has_exist();
}
inline bool ModuleState::exist() const {
  return exist_;
}
inline void ModuleState::set_exist(bool value) {
  set_has_exist();
  exist_ = value;
}

// required string rndVal = 2;
inline bool ModuleState::has_rndval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleState::set_has_rndval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleState::clear_has_rndval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleState::clear_rndval() {
  if (rndval_ != &::google::protobuf::internal::kEmptyString) {
    rndval_->clear();
  }
  clear_has_rndval();
}
inline const ::std::string& ModuleState::rndval() const {
  return *rndval_;
}
inline void ModuleState::set_rndval(const ::std::string& value) {
  set_has_rndval();
  if (rndval_ == &::google::protobuf::internal::kEmptyString) {
    rndval_ = new ::std::string;
  }
  rndval_->assign(value);
}
inline void ModuleState::set_rndval(const char* value) {
  set_has_rndval();
  if (rndval_ == &::google::protobuf::internal::kEmptyString) {
    rndval_ = new ::std::string;
  }
  rndval_->assign(value);
}
inline void ModuleState::set_rndval(const char* value, size_t size) {
  set_has_rndval();
  if (rndval_ == &::google::protobuf::internal::kEmptyString) {
    rndval_ = new ::std::string;
  }
  rndval_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModuleState::mutable_rndval() {
  set_has_rndval();
  if (rndval_ == &::google::protobuf::internal::kEmptyString) {
    rndval_ = new ::std::string;
  }
  return rndval_;
}
inline ::std::string* ModuleState::release_rndval() {
  clear_has_rndval();
  if (rndval_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rndval_;
    rndval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModuleState::set_allocated_rndval(::std::string* rndval) {
  if (rndval_ != &::google::protobuf::internal::kEmptyString) {
    delete rndval_;
  }
  if (rndval) {
    set_has_rndval();
    rndval_ = rndval;
  } else {
    clear_has_rndval();
    rndval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string id = 3;
inline bool ModuleState::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModuleState::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModuleState::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModuleState::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ModuleState::id() const {
  return *id_;
}
inline void ModuleState::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ModuleState::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ModuleState::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModuleState::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ModuleState::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModuleState::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RemoveIPCObject

// required string ipc_name = 1;
inline bool RemoveIPCObject::has_ipc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveIPCObject::set_has_ipc_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveIPCObject::clear_has_ipc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveIPCObject::clear_ipc_name() {
  if (ipc_name_ != &::google::protobuf::internal::kEmptyString) {
    ipc_name_->clear();
  }
  clear_has_ipc_name();
}
inline const ::std::string& RemoveIPCObject::ipc_name() const {
  return *ipc_name_;
}
inline void RemoveIPCObject::set_ipc_name(const ::std::string& value) {
  set_has_ipc_name();
  if (ipc_name_ == &::google::protobuf::internal::kEmptyString) {
    ipc_name_ = new ::std::string;
  }
  ipc_name_->assign(value);
}
inline void RemoveIPCObject::set_ipc_name(const char* value) {
  set_has_ipc_name();
  if (ipc_name_ == &::google::protobuf::internal::kEmptyString) {
    ipc_name_ = new ::std::string;
  }
  ipc_name_->assign(value);
}
inline void RemoveIPCObject::set_ipc_name(const char* value, size_t size) {
  set_has_ipc_name();
  if (ipc_name_ == &::google::protobuf::internal::kEmptyString) {
    ipc_name_ = new ::std::string;
  }
  ipc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveIPCObject::mutable_ipc_name() {
  set_has_ipc_name();
  if (ipc_name_ == &::google::protobuf::internal::kEmptyString) {
    ipc_name_ = new ::std::string;
  }
  return ipc_name_;
}
inline ::std::string* RemoveIPCObject::release_ipc_name() {
  clear_has_ipc_name();
  if (ipc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipc_name_;
    ipc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveIPCObject::set_allocated_ipc_name(::std::string* ipc_name) {
  if (ipc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ipc_name_;
  }
  if (ipc_name) {
    set_has_ipc_name();
    ipc_name_ = ipc_name;
  } else {
    clear_has_ipc_name();
    ipc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// IPCMessage

// required string message_name = 1;
inline bool IPCMessage::has_message_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPCMessage::set_has_message_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPCMessage::clear_has_message_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPCMessage::clear_message_name() {
  if (message_name_ != &::google::protobuf::internal::kEmptyString) {
    message_name_->clear();
  }
  clear_has_message_name();
}
inline const ::std::string& IPCMessage::message_name() const {
  return *message_name_;
}
inline void IPCMessage::set_message_name(const ::std::string& value) {
  set_has_message_name();
  if (message_name_ == &::google::protobuf::internal::kEmptyString) {
    message_name_ = new ::std::string;
  }
  message_name_->assign(value);
}
inline void IPCMessage::set_message_name(const char* value) {
  set_has_message_name();
  if (message_name_ == &::google::protobuf::internal::kEmptyString) {
    message_name_ = new ::std::string;
  }
  message_name_->assign(value);
}
inline void IPCMessage::set_message_name(const char* value, size_t size) {
  set_has_message_name();
  if (message_name_ == &::google::protobuf::internal::kEmptyString) {
    message_name_ = new ::std::string;
  }
  message_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCMessage::mutable_message_name() {
  set_has_message_name();
  if (message_name_ == &::google::protobuf::internal::kEmptyString) {
    message_name_ = new ::std::string;
  }
  return message_name_;
}
inline ::std::string* IPCMessage::release_message_name() {
  clear_has_message_name();
  if (message_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_name_;
    message_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IPCMessage::set_allocated_message_name(::std::string* message_name) {
  if (message_name_ != &::google::protobuf::internal::kEmptyString) {
    delete message_name_;
  }
  if (message_name) {
    set_has_message_name();
    message_name_ = message_name;
  } else {
    clear_has_message_name();
    message_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ipc.IPCName ipc_path = 2;
inline int IPCMessage::ipc_path_size() const {
  return ipc_path_.size();
}
inline void IPCMessage::clear_ipc_path() {
  ipc_path_.Clear();
}
inline const ::ipc::IPCName& IPCMessage::ipc_path(int index) const {
  return ipc_path_.Get(index);
}
inline ::ipc::IPCName* IPCMessage::mutable_ipc_path(int index) {
  return ipc_path_.Mutable(index);
}
inline ::ipc::IPCName* IPCMessage::add_ipc_path() {
  return ipc_path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ipc::IPCName >&
IPCMessage::ipc_path() const {
  return ipc_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::ipc::IPCName >*
IPCMessage::mutable_ipc_path() {
  return &ipc_path_;
}

// optional bytes message = 3;
inline bool IPCMessage::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IPCMessage::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IPCMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IPCMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& IPCMessage::message() const {
  return *message_;
}
inline void IPCMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void IPCMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void IPCMessage::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPCMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* IPCMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IPCMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Ping


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ipc_2eproto__INCLUDED
