var utils = require('twainetUtils');
var protobuf = require('protobufjs');
var module = require('twainetModule');
var conn = require('twainetConnector');
var ipcConn = require('ipcConnector');
var net = require('net');

exports.relay = "RelayName";

exports.relayServerModule = function(parentModule) {
	var protoFilePath1 = "../messages/client_server.proto";
	var protoFilePath2 = "../messages/ipc.proto";

	module.Module.call(this, exports.relay);

	this.builder = protobuf.loadProtoFile(protoFilePath1);
	this.builder = protobuf.loadProtoFile(protoFilePath2, 0, this.builder);
	this.servers = {};
	this.module = parentModule;
}

utils.extend(exports.relayServerModule, module.Module);

exports.relayServerModule.prototype.startConnector = function(conn) {
	var self = this,
		protoMap = this.builder.build(),
		msgMap = {};

	conn.builder = this.builder;
	var handlers = function () {}
	handlers.prototype.ModuleName = function(object) {
		self.connMap[conn.moduleName][0].sendMessage(object);
	}

	handlers.prototype.ModuleNameState = function(object) {
		self.connMap[conn.moduleName][0].sendMessage(object);
	}
	
	handlers.prototype.IPCMessage = function(object) {
		self.connMap[conn.moduleName][0].sendMessage(object);
	}

	msgMap = conn.generateMap(protoMap, handlers.prototype);
	for(message in msgMap) if(msgMap.hasOwnProperty(message)){
		conn.messageMap[message] = msgMap[message];
	}

	this.checkStart();
}

exports.relayServerModule.prototype.Start = function(ownSessionId, extSessionId) {
	var self = this;

	var sendInitTunnel = function(ownSessionId, extSessionId, address) {
		var initTunnel = self.builder.build("client_server.InitTunnel"),
			tunnelConnectAddress = self.builder.build("client_server.TunnelConnectAddress"),
			tunnelType = self.builder.build("client_server.TunnelType");

		console.log("udp server created, address - " + address.address + ":" + address.port);

		var myMessage = new initTunnel(extSessionId, ownSessionId, tunnelType.TUNNEL_RELAY, new tunnelConnectAddress(address.address, address.port));
		self.module.notifyMessage(0, myMessage);
	}
		
	this.servers[ownSessionId] = net.createServer(function(c) {
		self.addConnector(conn.Connector, c, ownSessionId, extSessionId);
		delete self.servers[ownSessionId];
	});

	this.servers[ownSessionId].listen(0, function() { //'listening' listener
		var address = this.address(),
			addr = utils.getAddr();

		sendInitTunnel(ownSessionId, extSessionId, {address: addr, port: address.port});
		console.log('relay server bound on port', address.port);
	});
}

exports.relayServerModule.prototype.onDestroy = function(conn) {
	module.Module.prototype.onDestroy.call(this, conn);
	
	if(this.connMap.size() < 2)
	{
		for(var id in this.connMap) if(this.connMap.hasOwnProperty(id)) {
			for(var i = 0; i < this.connMap[id].length; i++) {
				this.connMap[id][i].isDestroy = true;
				this.connMap[id][i].socketIO.destroy();
			}
		}
		this.connMap = {};
	}
}

exports.relayServerModule.prototype.checkStart = function() {
	if(this.connMap.size() == 2) {
		for(var id in this.connMap) if(this.connMap.hasOwnProperty(id)) {
			for(var i = 0; i < this.connMap[id].length; i++) {
				this.connMap[id][i].start();
			}
		}
	}
}
